/* The following code was generated by JFlex 1.4.1 on 08.05.10 16:31 */

/*
 * OCaml Support For IntelliJ Platform.
 * Copyright (C) 2010 Maxim Manuylov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/gpl-2.0.html>.
 */

package manuylov.maxim.ocaml.lang.lexer.flex;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import manuylov.maxim.ocaml.lang.lexer.token.OCamlTokenTypes;

import java.util.Map;
import java.util.HashMap;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 08.05.10 16:31 from the specification file
 * <tt>E:/Perforce/OCamlPlugin/LexerGeneration/src/highlighting-lexer-specification.flex</tt>
 */
public class OCamlHighlightingFlexLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int CHARACTER_HAS_BEEN_READ = 5;
  public static final int STRING = 6;
  public static final int CHARACTER_TO_BE_READ = 4;
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 1;
  public static final int BEFORE_COMMENT_END = 3;
  public static final int BEFORE_COMMENT_BEGIN = 2;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\4\1\1\22\0\1\32\1\70\1\35"+
    "\1\47\1\106\1\44\1\72\1\34\1\5\1\7\1\6\1\45\1\73"+
    "\1\27\1\25\1\44\1\16\1\14\6\13\2\10\1\43\1\75\1\76"+
    "\1\71\1\74\1\101\1\44\1\37\1\24\2\37\1\41\1\37\5\36"+
    "\1\40\2\36\1\22\10\36\1\20\2\36\1\102\1\30\1\77\1\44"+
    "\1\11\1\104\1\50\1\23\1\56\1\51\1\26\1\12\1\54\1\62"+
    "\1\55\1\66\1\42\1\15\1\65\1\33\1\21\1\60\1\42\1\53"+
    "\1\52\1\31\1\61\1\67\1\57\1\17\1\64\1\63\1\105\1\103"+
    "\1\100\1\46\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\2\10\1\6\1\10\1\11\2\10\1\12\1\10\1\13"+
    "\2\10\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\12\10\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\3\42\2\1\2\43\1\44\1\45\1\1\1\46\1\47"+
    "\1\6\1\50\1\0\10\10\3\0\1\51\1\10\1\52"+
    "\2\10\1\53\3\10\1\54\1\55\1\56\4\10\1\57"+
    "\1\60\1\61\1\23\1\0\1\2\1\10\1\62\1\63"+
    "\3\10\1\64\1\65\14\10\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111"+
    "\1\112\1\113\1\114\3\0\2\115\2\0\1\115\1\50"+
    "\1\0\1\116\1\10\1\117\1\10\1\120\1\121\2\10"+
    "\1\122\1\123\3\6\6\10\1\124\1\10\1\125\2\10"+
    "\1\126\1\2\1\0\1\127\1\10\1\130\3\10\1\131"+
    "\1\132\12\10\1\133\3\10\1\134\1\10\2\0\1\135"+
    "\3\0\2\10\1\136\1\137\1\140\1\10\1\141\1\10"+
    "\1\142\2\10\1\143\1\144\1\145\1\0\1\10\1\146"+
    "\7\10\1\147\1\150\10\10\1\151\2\10\1\152\2\10"+
    "\2\0\6\10\1\153\1\10\1\154\4\10\1\155\4\10"+
    "\1\156\2\10\2\0\1\157\1\160\1\161\4\10\1\162"+
    "\1\10\1\163\1\164\2\10\1\165\4\10\1\166\1\167"+
    "\1\10\1\170\1\171\1\172\1\173\1\174\3\10\1\175"+
    "\3\10\1\176\1\177";

  private static int [] zzUnpackAction() {
    int [] result = new int[317];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u0238\0\u01f1\0\u027f\0\u02c6\0\u01f1\0\u030d\0\u0354\0\u039b"+
    "\0\u03e2\0\u0429\0\u0354\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c"+
    "\0\u05d3\0\u061a\0\u0661\0\u01f1\0\u01f1\0\u06a8\0\u02c6\0\u02c6"+
    "\0\u06ef\0\u0736\0\u077d\0\u07c4\0\u080b\0\u0852\0\u0899\0\u08e0"+
    "\0\u0927\0\u096e\0\u09b5\0\u09fc\0\u0a43\0\u02c6\0\u0a8a\0\u01f1"+
    "\0\u0ad1\0\u0b18\0\u0b5f\0\u01f1\0\u01f1\0\u0ba6\0\u0bed\0\u0c34"+
    "\0\u01f1\0\u0c7b\0\u0cc2\0\u01f1\0\u0d09\0\u0d50\0\u0d97\0\u0dde"+
    "\0\u0e25\0\u0e6c\0\u01f1\0\u0eb3\0\u0efa\0\u01f1\0\u01f1\0\u01f1"+
    "\0\u0f41\0\u0f88\0\u0fcf\0\u1016\0\u105d\0\u10a4\0\u10eb\0\u1132"+
    "\0\u1179\0\u11c0\0\u1207\0\u124e\0\u1295\0\u0354\0\u12dc\0\u0354"+
    "\0\u1323\0\u136a\0\u01f1\0\u13b1\0\u13f8\0\u143f\0\u02c6\0\u02c6"+
    "\0\u0354\0\u1486\0\u14cd\0\u1514\0\u155b\0\u01f1\0\u01f1\0\u01f1"+
    "\0\u06ef\0\u0736\0\u15a2\0\u15e9\0\u1630\0\u1677\0\u16be\0\u1705"+
    "\0\u174c\0\u0354\0\u1793\0\u17da\0\u1821\0\u1868\0\u18af\0\u18f6"+
    "\0\u193d\0\u1984\0\u19cb\0\u1a12\0\u1a59\0\u1aa0\0\u1ae7\0\u06ef"+
    "\0\u02c6\0\u02c6\0\u01f1\0\u01f1\0\u01f1\0\u02c6\0\u02c6\0\u02c6"+
    "\0\u06ef\0\u01f1\0\u01f1\0\u01f1\0\u01f1\0\u02c6\0\u01f1\0\u02c6"+
    "\0\u02c6\0\u01f1\0\u01f1\0\u01f1\0\u01f1\0\u01f1\0\u1b2e\0\u1b75"+
    "\0\u1bbc\0\u1c03\0\u1c4a\0\u1c91\0\u1cd8\0\u1d1f\0\u1d66\0\u1dad"+
    "\0\u0354\0\u1df4\0\u1e3b\0\u1e82\0\u0354\0\u0354\0\u1ec9\0\u1f10"+
    "\0\u0354\0\u0354\0\u1f57\0\u1f9e\0\u1fe5\0\u202c\0\u2073\0\u20ba"+
    "\0\u2101\0\u2148\0\u218f\0\u0354\0\u21d6\0\u0354\0\u221d\0\u2264"+
    "\0\u0354\0\u22ab\0\u22f2\0\u0354\0\u2339\0\u0354\0\u2380\0\u23c7"+
    "\0\u240e\0\u0354\0\u0354\0\u2455\0\u249c\0\u24e3\0\u252a\0\u2571"+
    "\0\u25b8\0\u25ff\0\u2646\0\u268d\0\u26d4\0\u271b\0\u2762\0\u27a9"+
    "\0\u27f0\0\u0354\0\u2837\0\u287e\0\u28c5\0\u01f1\0\u0efa\0\u290c"+
    "\0\u2953\0\u299a\0\u29e1\0\u0354\0\u0354\0\u0354\0\u2a28\0\u0354"+
    "\0\u2a6f\0\u0354\0\u2ab6\0\u2afd\0\u0354\0\u0354\0\u0354\0\u2b44"+
    "\0\u2b8b\0\u0354\0\u2bd2\0\u2c19\0\u2c60\0\u2ca7\0\u2cee\0\u2d35"+
    "\0\u2d7c\0\u0354\0\u0354\0\u2dc3\0\u2e0a\0\u2e51\0\u2e98\0\u2edf"+
    "\0\u2f26\0\u2f6d\0\u2fb4\0\u0354\0\u2ffb\0\u3042\0\u0354\0\u3089"+
    "\0\u30d0\0\u3117\0\u315e\0\u31a5\0\u31ec\0\u3233\0\u327a\0\u32c1"+
    "\0\u3308\0\u0354\0\u334f\0\u0354\0\u3396\0\u33dd\0\u3424\0\u346b"+
    "\0\u0354\0\u34b2\0\u34f9\0\u3540\0\u3587\0\u0354\0\u35ce\0\u3615"+
    "\0\u365c\0\u36a3\0\u0354\0\u0354\0\u0354\0\u36ea\0\u3731\0\u3778"+
    "\0\u37bf\0\u0354\0\u3806\0\u0354\0\u0354\0\u384d\0\u3894\0\u0354"+
    "\0\u38db\0\u3922\0\u3969\0\u39b0\0\u0354\0\u0354\0\u39f7\0\u0354"+
    "\0\u0354\0\u0354\0\u0354\0\u0354\0\u3a3e\0\u3a85\0\u3acc\0\u0354"+
    "\0\u3b13\0\u3b5a\0\u3ba1\0\u0354\0\u0354";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[317];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\3\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\2\16\1\21\1\22\1\23\1\24\1\25\1\24"+
    "\1\26\1\24\1\27\1\30\1\31\1\10\1\32\1\12"+
    "\1\33\1\34\1\35\4\24\1\23\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\23\1\47"+
    "\1\50\1\51\1\52\4\23\1\53\1\23\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\5\74\1\75"+
    "\1\76\100\74\5\10\1\77\107\10\1\100\100\10\30\101"+
    "\1\102\3\101\1\103\52\101\34\10\1\103\52\10\30\104"+
    "\1\105\4\104\1\106\51\104\111\0\1\12\112\0\1\107"+
    "\106\0\1\37\16\0\1\37\1\0\1\37\13\0\4\37"+
    "\21\0\5\37\1\0\1\37\2\0\1\37\1\0\1\37"+
    "\2\0\1\37\10\0\2\16\1\0\2\16\1\110\1\16"+
    "\6\0\1\111\1\112\4\0\1\110\4\0\1\110\1\112"+
    "\55\0\15\23\1\0\1\23\2\0\1\23\1\0\2\23"+
    "\1\0\5\23\5\0\20\23\27\0\11\23\1\113\3\23"+
    "\1\0\1\23\2\0\1\23\1\0\2\23\1\0\5\23"+
    "\5\0\1\114\10\23\1\115\6\23\27\0\7\23\1\116"+
    "\1\23\1\117\3\23\1\0\1\120\2\0\1\23\1\0"+
    "\2\23\1\0\5\23\5\0\1\121\1\23\1\122\15\23"+
    "\27\0\2\16\1\0\2\16\1\110\1\16\2\123\2\124"+
    "\2\125\1\111\1\112\4\0\1\110\4\0\1\110\1\112"+
    "\55\0\15\24\1\0\1\24\2\0\1\24\1\0\2\24"+
    "\1\0\5\24\5\0\20\24\27\0\2\23\1\126\10\23"+
    "\1\127\1\23\1\0\1\23\2\0\1\23\1\0\2\23"+
    "\1\0\5\23\5\0\3\23\1\130\4\23\1\131\7\23"+
    "\27\0\15\23\1\0\1\132\2\0\1\23\1\0\2\23"+
    "\1\0\5\23\5\0\20\23\44\0\1\133\71\0\5\23"+
    "\1\134\1\23\1\135\5\23\1\0\1\23\2\0\1\23"+
    "\1\0\1\136\1\23\1\0\5\23\5\0\20\23\25\0"+
    "\1\37\16\0\1\137\1\0\1\37\13\0\4\37\21\0"+
    "\4\37\1\140\1\0\1\37\2\0\1\37\1\0\1\37"+
    "\2\0\1\37\10\0\11\23\1\141\3\23\1\0\1\23"+
    "\2\0\1\23\1\0\2\23\1\0\5\23\5\0\3\23"+
    "\1\142\6\23\1\143\1\23\1\144\3\23\27\0\15\23"+
    "\1\0\1\145\2\0\1\23\1\0\2\23\1\0\5\23"+
    "\5\0\20\23\62\0\1\146\25\0\1\147\2\0\1\150"+
    "\20\0\1\151\16\0\1\151\1\0\1\151\13\0\4\151"+
    "\21\0\5\151\1\0\1\151\2\0\1\151\1\0\1\151"+
    "\2\0\1\151\1\0\4\152\3\0\1\153\2\0\2\153"+
    "\1\0\1\153\13\0\1\152\64\0\15\23\1\0\1\23"+
    "\2\0\1\23\1\0\1\154\1\23\1\0\5\23\5\0"+
    "\2\23\1\155\15\23\27\0\11\23\1\156\3\23\1\0"+
    "\1\23\2\0\1\23\1\0\2\23\1\0\5\23\5\0"+
    "\20\23\27\0\15\23\1\0\1\23\2\0\1\157\1\0"+
    "\2\23\1\0\5\23\5\0\5\23\1\160\12\23\27\0"+
    "\15\23\1\0\1\161\2\0\1\23\1\0\2\23\1\0"+
    "\5\23\5\0\20\23\27\0\2\23\1\162\12\23\1\0"+
    "\1\23\2\0\1\23\1\0\1\163\1\23\1\0\5\23"+
    "\5\0\20\23\27\0\5\23\1\164\3\23\1\165\3\23"+
    "\1\0\1\23\2\0\1\23\1\0\2\23\1\0\5\23"+
    "\5\0\20\23\27\0\15\23\1\0\1\23\2\0\1\23"+
    "\1\0\2\23\1\0\5\23\5\0\5\23\1\166\4\23"+
    "\1\167\5\23\27\0\15\23\1\0\1\23\2\0\1\23"+
    "\1\0\2\23\1\0\5\23\5\0\1\170\2\23\1\171"+
    "\14\23\27\0\11\23\1\172\3\23\1\0\1\173\2\0"+
    "\1\23\1\0\2\23\1\0\5\23\5\0\1\174\10\23"+
    "\1\175\6\23\27\0\15\23\1\0\1\23\2\0\1\23"+
    "\1\0\2\23\1\0\5\23\5\0\1\176\4\23\1\177"+
    "\12\23\25\0\1\151\16\0\1\151\1\0\1\151\13\0"+
    "\4\151\21\0\1\151\1\200\3\151\1\0\1\151\2\0"+
    "\1\151\1\0\1\151\2\0\1\151\6\0\1\37\16\0"+
    "\1\37\1\0\1\37\13\0\4\37\21\0\2\37\1\201"+
    "\2\37\1\0\1\37\2\0\1\37\1\0\1\37\2\0"+
    "\1\37\6\0\1\37\16\0\1\37\1\0\1\37\13\0"+
    "\4\37\21\0\4\37\1\202\1\0\1\37\1\203\1\204"+
    "\1\37\1\0\1\37\2\0\1\37\75\0\1\205\17\0"+
    "\1\37\16\0\1\37\1\0\1\206\13\0\1\207\3\37"+
    "\21\0\5\37\1\0\1\210\2\0\1\37\1\0\1\37"+
    "\2\0\1\37\6\0\1\151\16\0\1\151\1\0\1\151"+
    "\13\0\4\151\21\0\5\151\1\0\1\151\2\0\1\211"+
    "\1\0\1\151\2\0\1\151\74\0\1\212\1\0\1\213"+
    "\4\0\1\214\11\0\1\37\16\0\1\37\1\0\1\37"+
    "\13\0\4\37\21\0\5\37\1\0\1\37\1\215\1\0"+
    "\1\37\1\0\1\216\2\0\1\37\76\0\1\217\16\0"+
    "\1\37\16\0\1\37\1\0\1\37\13\0\1\220\3\37"+
    "\21\0\5\37\1\0\1\37\2\0\1\37\1\0\1\37"+
    "\2\0\1\221\6\0\1\222\107\0\1\223\105\0\1\224"+
    "\107\0\1\225\133\0\1\226\62\0\1\227\2\0\2\227"+
    "\1\0\1\227\1\230\3\0\1\231\4\0\6\231\15\0"+
    "\1\231\33\0\30\104\1\0\4\104\1\0\51\104\1\0"+
    "\1\232\1\233\5\0\1\234\2\0\2\234\1\0\1\234"+
    "\1\235\3\0\1\236\4\0\6\236\15\0\1\236\43\0"+
    "\2\111\1\0\2\111\1\0\1\111\7\0\1\112\12\0"+
    "\1\112\55\0\1\237\2\0\2\237\1\0\1\237\10\0"+
    "\1\240\15\0\1\240\51\0\15\23\1\0\1\23\2\0"+
    "\1\23\1\0\2\23\1\0\5\23\5\0\3\23\1\241"+
    "\14\23\27\0\5\23\1\242\7\23\1\0\1\23\2\0"+
    "\1\23\1\0\2\23\1\0\5\23\5\0\20\23\27\0"+
    "\15\23\1\0\1\23\2\0\1\23\1\0\1\243\1\23"+
    "\1\0\5\23\5\0\20\23\27\0\11\23\1\244\3\23"+
    "\1\0\1\23\2\0\1\23\1\0\2\23\1\0\5\23"+
    "\5\0\20\23\27\0\15\23\1\0\1\23\2\0\1\23"+
    "\1\0\2\23\1\0\5\23\5\0\3\23\1\245\14\23"+
    "\27\0\15\23\1\0\1\23\2\0\1\246\1\0\2\23"+
    "\1\0\5\23\5\0\20\23\27\0\15\23\1\0\1\23"+
    "\2\0\1\23\1\0\1\247\1\23\1\0\5\23\5\0"+
    "\13\23\1\250\4\23\27\0\5\23\1\251\7\23\1\0"+
    "\1\23\2\0\1\23\1\0\2\23\1\0\5\23\5\0"+
    "\3\23\1\252\14\23\27\0\1\253\1\0\3\253\1\0"+
    "\1\253\4\0\2\253\1\0\1\253\10\0\1\253\1\0"+
    "\1\253\6\0\2\253\4\0\1\253\43\0\2\254\1\0"+
    "\1\254\104\0\1\255\1\0\1\255\100\0\15\23\1\0"+
    "\1\23\2\0\1\23\1\0\2\23\1\0\5\23\5\0"+
    "\16\23\1\256\1\23\27\0\15\23\1\0\1\257\2\0"+
    "\1\23\1\0\2\23\1\0\5\23\5\0\20\23\27\0"+
    "\15\23\1\0\1\23\2\0\1\23\1\0\2\23\1\0"+
    "\5\23\5\0\4\23\1\260\13\23\27\0\15\23\1\0"+
    "\1\23\2\0\1\23\1\0\2\23\1\0\5\23\5\0"+
    "\2\23\1\261\15\23\27\0\15\23\1\0\1\23\2\0"+
    "\1\262\1\0\2\23\1\0\5\23\5\0\6\23\1\263"+
    "\11\23\27\0\15\23\1\0\1\23\2\0\1\23\1\0"+
    "\2\23\1\0\5\23\5\0\1\23\1\264\16\23\27\0"+
    "\15\23\1\0\1\23\2\0\1\23\1\0\2\23\1\0"+
    "\5\23\5\0\11\23\1\265\2\23\1\266\3\23\27\0"+
    "\15\23\1\0\1\267\2\0\1\23\1\0\2\23\1\0"+
    "\5\23\5\0\20\23\27\0\15\23\1\0\1\23\2\0"+
    "\1\23\1\0\2\23\1\0\5\23\5\0\10\23\1\270"+
    "\7\23\27\0\15\23\1\0\1\23\2\0\1\23\1\0"+
    "\2\23\1\0\5\23\5\0\7\23\1\271\10\23\20\0"+
    "\4\272\3\0\1\153\2\0\2\153\1\0\1\153\13\0"+
    "\1\272\2\0\1\273\61\0\15\23\1\0\1\23\2\0"+
    "\1\23\1\0\2\23\1\0\5\23\5\0\1\23\1\274"+
    "\16\23\27\0\15\23\1\0\1\23\2\0\1\23\1\0"+
    "\2\23\1\0\5\23\5\0\2\23\1\275\1\276\14\23"+
    "\27\0\15\23\1\0\1\23\2\0\1\23\1\0\1\277"+
    "\1\23\1\0\5\23\5\0\7\23\1\300\10\23\27\0"+
    "\15\23\1\0\1\23\2\0\1\23\1\0\2\23\1\0"+
    "\5\23\5\0\3\23\1\301\14\23\27\0\15\23\1\0"+
    "\1\23\2\0\1\23\1\0\2\23\1\0\5\23\5\0"+
    "\4\23\1\302\13\23\27\0\15\23\1\0\1\23\2\0"+
    "\1\23\1\0\2\23\1\0\5\23\5\0\6\23\1\303"+
    "\11\23\27\0\15\23\1\0\1\23\2\0\1\23\1\0"+
    "\2\23\1\0\5\23\5\0\5\23\1\304\1\305\3\23"+
    "\1\306\5\23\27\0\15\23\1\0\1\23\2\0\1\23"+
    "\1\0\2\23\1\0\5\23\5\0\1\307\17\23\27\0"+
    "\15\23\1\0\1\23\2\0\1\23\1\0\1\310\1\23"+
    "\1\0\5\23\5\0\20\23\27\0\15\23\1\0\1\23"+
    "\2\0\1\311\1\0\2\23\1\0\5\23\5\0\20\23"+
    "\27\0\15\23\1\0\1\312\2\0\1\23\1\0\2\23"+
    "\1\0\5\23\5\0\5\23\1\313\12\23\27\0\15\23"+
    "\1\0\1\23\2\0\1\23\1\0\2\23\1\0\5\23"+
    "\5\0\3\23\1\314\14\23\27\0\15\23\1\0\1\23"+
    "\2\0\1\23\1\0\2\23\1\0\5\23\5\0\5\23"+
    "\1\315\12\23\27\0\15\23\1\0\1\23\2\0\1\23"+
    "\1\0\2\23\1\0\5\23\5\0\1\23\1\316\16\23"+
    "\27\0\15\23\1\0\1\23\2\0\1\317\1\0\2\23"+
    "\1\0\5\23\5\0\20\23\27\0\15\23\1\0\1\23"+
    "\2\0\1\320\1\0\2\23\1\0\5\23\5\0\20\23"+
    "\27\0\15\23\1\0\1\23\2\0\1\321\1\0\2\23"+
    "\1\0\5\23\5\0\20\23\27\0\5\23\1\322\7\23"+
    "\1\0\1\23\2\0\1\23\1\0\2\23\1\0\5\23"+
    "\5\0\20\23\27\0\15\23\1\0\1\23\2\0\1\23"+
    "\1\0\2\23\1\0\5\23\5\0\3\23\1\323\14\23"+
    "\27\0\1\324\2\0\2\324\1\0\1\324\100\0\1\325"+
    "\1\0\3\325\1\0\1\325\4\0\2\325\1\0\1\325"+
    "\10\0\1\325\1\0\1\325\6\0\2\325\4\0\1\325"+
    "\64\0\1\326\54\0\2\233\24\0\1\327\1\0\1\233"+
    "\57\0\1\233\24\0\1\327\1\0\1\233\64\0\1\330"+
    "\2\0\2\330\1\0\1\330\100\0\1\331\1\0\3\331"+
    "\1\0\1\331\4\0\2\331\1\0\1\331\10\0\1\331"+
    "\1\0\1\331\6\0\2\331\4\0\1\331\60\0\1\327"+
    "\66\0\2\237\1\0\2\237\1\0\1\237\100\0\1\237"+
    "\2\0\2\237\1\0\1\237\100\0\15\23\1\0\1\23"+
    "\2\0\1\23\1\0\2\23\1\0\5\23\5\0\2\23"+
    "\1\332\15\23\27\0\15\23\1\0\1\23\2\0\1\23"+
    "\1\0\2\23\1\0\5\23\5\0\6\23\1\333\11\23"+
    "\27\0\15\23\1\0\1\23\2\0\1\23\1\0\2\23"+
    "\1\0\5\23\5\0\3\23\1\334\14\23\27\0\15\23"+
    "\1\0\1\23\2\0\1\23\1\0\2\23\1\0\5\23"+
    "\5\0\1\23\1\335\16\23\27\0\15\23\1\0\1\23"+
    "\2\0\1\23\1\0\2\23\1\0\5\23\5\0\14\23"+
    "\1\336\3\23\27\0\5\253\1\110\1\253\4\0\2\253"+
    "\1\0\1\253\4\0\1\110\3\0\1\253\1\110\1\253"+
    "\6\0\2\253\4\0\1\253\41\0\1\254\1\0\2\254"+
    "\1\110\1\254\14\0\1\110\4\0\1\110\57\0\1\255"+
    "\2\0\1\255\1\110\1\255\14\0\1\110\4\0\1\110"+
    "\56\0\15\23\1\0\1\337\2\0\1\23\1\0\2\23"+
    "\1\0\5\23\5\0\20\23\27\0\15\23\1\0\1\23"+
    "\2\0\1\23\1\0\1\340\1\23\1\0\5\23\5\0"+
    "\20\23\27\0\15\23\1\0\1\23\2\0\1\23\1\0"+
    "\2\23\1\0\5\23\5\0\5\23\1\341\12\23\27\0"+
    "\15\23\1\0\1\342\2\0\1\23\1\0\2\23\1\0"+
    "\5\23\5\0\20\23\27\0\15\23\1\0\1\343\2\0"+
    "\1\23\1\0\2\23\1\0\5\23\5\0\20\23\27\0"+
    "\15\23\1\0\1\344\2\0\1\23\1\0\2\23\1\0"+
    "\5\23\5\0\20\23\27\0\15\23\1\0\1\345\2\0"+
    "\1\23\1\0\2\23\1\0\5\23\5\0\20\23\27\0"+
    "\15\23\1\0\1\23\2\0\1\23\1\0\1\346\1\23"+
    "\1\0\5\23\5\0\20\23\27\0\15\23\1\0\1\347"+
    "\2\0\1\23\1\0\2\23\1\0\5\23\5\0\20\23"+
    "\20\0\4\272\25\0\1\272\2\0\1\273\51\0\30\273"+
    "\1\350\4\273\1\12\51\273\10\0\15\23\1\0\1\351"+
    "\2\0\1\23\1\0\2\23\1\0\5\23\5\0\20\23"+
    "\27\0\15\23\1\0\1\352\2\0\1\23\1\0\2\23"+
    "\1\0\5\23\5\0\20\23\27\0\15\23\1\0\1\23"+
    "\2\0\1\23\1\0\1\353\1\23\1\0\5\23\5\0"+
    "\20\23\27\0\15\23\1\0\1\23\2\0\1\23\1\0"+
    "\2\23\1\0\5\23\5\0\11\23\1\354\6\23\27\0"+
    "\15\23\1\0\1\23\2\0\1\355\1\0\2\23\1\0"+
    "\5\23\5\0\20\23\27\0\5\23\1\356\7\23\1\0"+
    "\1\23\2\0\1\23\1\0\2\23\1\0\5\23\5\0"+
    "\20\23\27\0\15\23\1\0\1\357\2\0\1\23\1\0"+
    "\2\23\1\0\5\23\5\0\20\23\27\0\15\23\1\0"+
    "\1\23\2\0\1\23\1\0\2\23\1\0\5\23\5\0"+
    "\2\23\1\360\15\23\27\0\15\23\1\0\1\23\2\0"+
    "\1\23\1\0\2\23\1\0\5\23\5\0\2\23\1\361"+
    "\15\23\27\0\15\23\1\0\1\23\2\0\1\23\1\0"+
    "\2\23\1\0\5\23\5\0\12\23\1\362\5\23\27\0"+
    "\15\23\1\0\1\23\2\0\1\23\1\0\1\363\1\23"+
    "\1\0\5\23\5\0\20\23\27\0\5\23\1\364\7\23"+
    "\1\0\1\23\2\0\1\23\1\0\2\23\1\0\5\23"+
    "\5\0\20\23\27\0\15\23\1\0\1\23\2\0\1\23"+
    "\1\0\2\23\1\0\5\23\5\0\2\23\1\365\15\23"+
    "\27\0\15\23\1\0\1\23\2\0\1\23\1\0\2\23"+
    "\1\0\5\23\5\0\17\23\1\366\27\0\15\23\1\0"+
    "\1\23\2\0\1\23\1\0\2\23\1\0\5\23\5\0"+
    "\11\23\1\367\6\23\27\0\15\23\1\0\1\23\2\0"+
    "\1\23\1\0\2\23\1\0\5\23\5\0\12\23\1\370"+
    "\5\23\27\0\15\23\1\0\1\23\2\0\1\23\1\0"+
    "\2\23\1\0\5\23\5\0\6\23\1\371\11\23\27\0"+
    "\15\23\1\0\1\23\2\0\1\23\1\0\2\23\1\0"+
    "\5\23\5\0\1\372\17\23\27\0\15\23\1\0\1\23"+
    "\2\0\1\373\1\0\2\23\1\0\5\23\5\0\20\23"+
    "\27\0\1\231\2\0\2\231\1\0\1\231\100\0\1\231"+
    "\1\0\3\231\1\0\1\231\4\0\2\231\1\0\1\231"+
    "\10\0\1\231\1\0\1\231\6\0\2\231\4\0\1\231"+
    "\40\0\1\236\2\0\2\236\1\0\1\236\100\0\1\236"+
    "\1\0\3\236\1\0\1\236\4\0\2\236\1\0\1\236"+
    "\10\0\1\236\1\0\1\236\6\0\2\236\4\0\1\236"+
    "\40\0\15\23\1\0\1\374\2\0\1\23\1\0\2\23"+
    "\1\0\5\23\5\0\20\23\27\0\15\23\1\0\1\23"+
    "\2\0\1\375\1\0\2\23\1\0\5\23\5\0\20\23"+
    "\27\0\15\23\1\0\1\23\2\0\1\23\1\0\2\23"+
    "\1\0\5\23\5\0\6\23\1\376\11\23\27\0\15\23"+
    "\1\0\1\23\2\0\1\23\1\0\1\377\1\23\1\0"+
    "\5\23\5\0\20\23\27\0\15\23\1\0\1\23\2\0"+
    "\1\23\1\0\2\23\1\0\5\23\5\0\3\23\1\u0100"+
    "\14\23\27\0\15\23\1\0\1\23\2\0\1\23\1\0"+
    "\2\23\1\0\5\23\5\0\10\23\1\u0101\7\23\27\0"+
    "\1\u0102\2\0\2\u0102\1\0\1\u0102\1\u0103\3\0\1\273"+
    "\4\0\6\273\15\0\1\273\43\0\15\23\1\0\1\23"+
    "\2\0\1\23\1\0\2\23\1\0\5\23\5\0\3\23"+
    "\1\u0104\14\23\27\0\15\23\1\0\1\23\2\0\1\u0105"+
    "\1\0\2\23\1\0\5\23\5\0\20\23\27\0\15\23"+
    "\1\0\1\23\2\0\1\23\1\0\2\23\1\0\5\23"+
    "\5\0\6\23\1\u0106\11\23\27\0\15\23\1\0\1\23"+
    "\2\0\1\23\1\0\2\23\1\0\5\23\5\0\5\23"+
    "\1\u0107\12\23\27\0\15\23\1\0\1\23\2\0\1\23"+
    "\1\0\2\23\1\0\5\23\5\0\11\23\1\u0108\6\23"+
    "\27\0\15\23\1\0\1\23\2\0\1\23\1\0\2\23"+
    "\1\0\5\23\5\0\3\23\1\u0109\14\23\27\0\15\23"+
    "\1\0\1\23\2\0\1\23\1\0\2\23\1\0\5\23"+
    "\5\0\2\23\1\u010a\15\23\27\0\15\23\1\0\1\23"+
    "\2\0\1\u010b\1\0\2\23\1\0\5\23\5\0\20\23"+
    "\27\0\15\23\1\0\1\u010c\2\0\1\23\1\0\2\23"+
    "\1\0\5\23\5\0\20\23\27\0\15\23\1\0\1\u010d"+
    "\2\0\1\23\1\0\2\23\1\0\5\23\5\0\20\23"+
    "\27\0\15\23\1\0\1\23\2\0\1\23\1\0\2\23"+
    "\1\0\5\23\5\0\1\u010e\17\23\27\0\5\23\1\u010f"+
    "\7\23\1\0\1\23\2\0\1\23\1\0\2\23\1\0"+
    "\5\23\5\0\20\23\27\0\11\23\1\u0110\3\23\1\0"+
    "\1\23\2\0\1\23\1\0\2\23\1\0\5\23\5\0"+
    "\20\23\27\0\15\23\1\0\1\23\2\0\1\23\1\0"+
    "\2\23\1\0\5\23\5\0\12\23\1\u0111\5\23\27\0"+
    "\13\23\1\u0112\1\23\1\0\1\23\2\0\1\23\1\0"+
    "\2\23\1\0\5\23\5\0\20\23\27\0\15\23\1\0"+
    "\1\23\2\0\1\23\1\0\2\23\1\0\5\23\5\0"+
    "\11\23\1\u0113\6\23\27\0\11\23\1\u0114\3\23\1\0"+
    "\1\23\2\0\1\23\1\0\2\23\1\0\5\23\5\0"+
    "\5\23\1\u0115\12\23\27\0\15\23\1\0\1\23\2\0"+
    "\1\u0116\1\0\2\23\1\0\5\23\5\0\20\23\27\0"+
    "\15\23\1\0\1\23\2\0\1\23\1\0\1\u0117\1\23"+
    "\1\0\5\23\5\0\20\23\27\0\15\23\1\0\1\23"+
    "\2\0\1\u0118\1\0\2\23\1\0\5\23\5\0\20\23"+
    "\27\0\1\u0119\2\0\2\u0119\1\0\1\u0119\100\0\1\u011a"+
    "\1\0\3\u011a\1\0\1\u011a\4\0\2\u011a\1\0\1\u011a"+
    "\10\0\1\u011a\1\0\1\u011a\6\0\2\u011a\4\0\1\u011a"+
    "\40\0\15\23\1\0\1\23\2\0\1\u011b\1\0\2\23"+
    "\1\0\5\23\5\0\20\23\27\0\11\23\1\u011c\3\23"+
    "\1\0\1\23\2\0\1\23\1\0\2\23\1\0\5\23"+
    "\5\0\20\23\27\0\15\23\1\0\1\23\2\0\1\u011d"+
    "\1\0\2\23\1\0\5\23\5\0\20\23\27\0\15\23"+
    "\1\0\1\23\2\0\1\23\1\0\2\23\1\0\5\23"+
    "\5\0\1\u011e\17\23\27\0\15\23\1\0\1\23\2\0"+
    "\1\23\1\0\2\23\1\0\5\23\5\0\1\23\1\u011f"+
    "\16\23\27\0\15\23\1\0\1\23\2\0\1\23\1\0"+
    "\2\23\1\0\5\23\5\0\5\23\1\u0120\12\23\27\0"+
    "\15\23\1\0\1\23\2\0\1\23\1\0\2\23\1\0"+
    "\5\23\5\0\3\23\1\u0121\14\23\27\0\15\23\1\0"+
    "\1\23\2\0\1\23\1\0\2\23\1\0\5\23\5\0"+
    "\3\23\1\u0122\14\23\27\0\15\23\1\0\1\23\2\0"+
    "\1\u0123\1\0\2\23\1\0\5\23\5\0\20\23\27\0"+
    "\15\23\1\0\1\u0124\2\0\1\23\1\0\2\23\1\0"+
    "\5\23\5\0\20\23\27\0\15\23\1\0\1\23\2\0"+
    "\1\23\1\0\2\23\1\0\5\23\5\0\1\23\1\u0125"+
    "\16\23\27\0\5\23\1\u0126\7\23\1\0\1\23\2\0"+
    "\1\23\1\0\2\23\1\0\5\23\5\0\20\23\27\0"+
    "\15\23\1\0\1\23\2\0\1\23\1\0\2\23\1\0"+
    "\5\23\5\0\1\u0127\17\23\27\0\15\23\1\0\1\23"+
    "\2\0\1\23\1\0\2\23\1\0\5\23\5\0\3\23"+
    "\1\u0128\14\23\27\0\11\23\1\u0129\3\23\1\0\1\23"+
    "\2\0\1\23\1\0\2\23\1\0\5\23\5\0\20\23"+
    "\27\0\15\23\1\0\1\23\2\0\1\23\1\0\2\23"+
    "\1\0\5\23\5\0\1\u012a\17\23\27\0\15\23\1\0"+
    "\1\23\2\0\1\23\1\0\2\23\1\0\5\23\5\0"+
    "\5\23\1\u012b\12\23\27\0\1\273\2\0\2\273\1\0"+
    "\1\273\100\0\1\273\1\0\3\273\1\0\1\273\4\0"+
    "\2\273\1\0\1\273\10\0\1\273\1\0\1\273\6\0"+
    "\2\273\4\0\1\273\40\0\5\23\1\u012c\7\23\1\0"+
    "\1\23\2\0\1\23\1\0\2\23\1\0\5\23\5\0"+
    "\20\23\27\0\15\23\1\0\1\u012d\2\0\1\23\1\0"+
    "\2\23\1\0\5\23\5\0\20\23\27\0\15\23\1\0"+
    "\1\23\2\0\1\u012e\1\0\2\23\1\0\5\23\5\0"+
    "\20\23\27\0\15\23\1\0\1\23\2\0\1\23\1\0"+
    "\2\23\1\0\5\23\5\0\1\u012f\17\23\27\0\15\23"+
    "\1\0\1\u0130\2\0\1\23\1\0\2\23\1\0\5\23"+
    "\5\0\20\23\27\0\15\23\1\0\1\u0131\2\0\1\23"+
    "\1\0\2\23\1\0\5\23\5\0\20\23\27\0\5\23"+
    "\1\u0132\7\23\1\0\1\23\2\0\1\23\1\0\2\23"+
    "\1\0\5\23\5\0\20\23\27\0\15\23\1\0\1\23"+
    "\2\0\1\23\1\0\1\u0133\1\23\1\0\5\23\5\0"+
    "\20\23\27\0\5\23\1\u0134\7\23\1\0\1\23\2\0"+
    "\1\23\1\0\2\23\1\0\5\23\5\0\20\23\27\0"+
    "\11\23\1\u0135\3\23\1\0\1\23\2\0\1\23\1\0"+
    "\2\23\1\0\5\23\5\0\20\23\27\0\15\23\1\0"+
    "\1\23\2\0\1\23\1\0\2\23\1\0\5\23\5\0"+
    "\5\23\1\u0136\12\23\27\0\15\23\1\0\1\23\2\0"+
    "\1\23\1\0\2\23\1\0\5\23\5\0\5\23\1\u0137"+
    "\12\23\27\0\15\23\1\0\1\23\2\0\1\23\1\0"+
    "\1\u0138\1\23\1\0\5\23\5\0\20\23\27\0\15\23"+
    "\1\0\1\23\2\0\1\23\1\0\2\23\1\0\5\23"+
    "\5\0\13\23\1\u0139\4\23\27\0\15\23\1\0\1\23"+
    "\2\0\1\23\1\0\1\u013a\1\23\1\0\5\23\5\0"+
    "\20\23\27\0\15\23\1\0\1\u013b\2\0\1\23\1\0"+
    "\2\23\1\0\5\23\5\0\20\23\27\0\15\23\1\0"+
    "\1\23\2\0\1\u013c\1\0\2\23\1\0\5\23\5\0"+
    "\20\23\27\0\15\23\1\0\1\23\2\0\1\23\1\0"+
    "\2\23\1\0\5\23\5\0\3\23\1\u013d\14\23\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15336];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\11\1\1\1\11\2\1\1\11\16\1\2\11"+
    "\22\1\1\11\3\1\2\11\3\1\1\11\2\1\1\11"+
    "\6\1\1\11\2\1\3\11\1\1\1\0\10\1\3\0"+
    "\5\1\1\11\12\1\3\11\1\1\1\0\30\1\3\11"+
    "\4\1\4\11\1\1\1\11\2\1\5\11\3\0\2\1"+
    "\2\0\2\1\1\0\32\1\1\0\30\1\2\0\1\11"+
    "\3\0\16\1\1\0\31\1\2\0\25\1\2\0\43\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[317];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  private int myNestedCommentsDepth;

  private int mySavedTokenStart;

  private void saveNextTokenStart() {
    mySavedTokenStart = zzStartRead + yylength();
  }

  private void restoreSavedTokenStart() {
    zzStartRead = mySavedTokenStart;
  }


  public OCamlHighlightingFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public OCamlHighlightingFlexLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 166) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null; 
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 57: 
          { return OCamlTokenTypes.GT_RBRACKET;
          }
        case 128: break;
        case 12: 
          { yybegin(CHARACTER_TO_BE_READ);
                              return OCamlTokenTypes.OPENING_QUOTE;
          }
        case 129: break;
        case 79: 
          { return OCamlTokenTypes.FUN_KEYWORD;
          }
        case 130: break;
        case 41: 
          { return OCamlTokenTypes.OF_KEYWORD;
          }
        case 131: break;
        case 10: 
          { return OCamlTokenTypes.DOT;
          }
        case 132: break;
        case 38: 
          { yybegin(YYINITIAL);
                              return OCamlTokenTypes.CLOSING_DOUBLE_QUOTE;
          }
        case 133: break;
        case 85: 
          { return OCamlTokenTypes.TRY_KEYWORD;
          }
        case 134: break;
        case 16: 
          { return OCamlTokenTypes.PLUS;
          }
        case 135: break;
        case 32: 
          { return OCamlTokenTypes.LBRACE;
          }
        case 136: break;
        case 37: 
          { return OCamlTokenTypes.REGULAR_CHARS;
          }
        case 137: break;
        case 109: 
          { return OCamlTokenTypes.MATCH_KEYWORD;
          }
        case 138: break;
        case 106: 
          { return OCamlTokenTypes.BEGIN_KEYWORD;
          }
        case 139: break;
        case 118: 
          { return OCamlTokenTypes.INCLUDE_KEYWORD;
          }
        case 140: break;
        case 111: 
          { return OCamlTokenTypes.ASSERT_KEYWORD;
          }
        case 141: break;
        case 91: 
          { return OCamlTokenTypes.MOD_KEYWORD;
          }
        case 142: break;
        case 68: 
          { return OCamlTokenTypes.VBAR_VBAR;
          }
        case 143: break;
        case 102: 
          { return OCamlTokenTypes.DONE_KEYWORD;
          }
        case 144: break;
        case 2: 
          { return OCamlTokenTypes.WHITE_SPACE;
          }
        case 145: break;
        case 70: 
          { return OCamlTokenTypes.DOLLAR_COLON;
          }
        case 146: break;
        case 54: 
          { return OCamlTokenTypes.NOT_EQ;
          }
        case 147: break;
        case 97: 
          { return OCamlTokenTypes.OPEN_KEYWORD;
          }
        case 148: break;
        case 23: 
          { return OCamlTokenTypes.GT;
          }
        case 149: break;
        case 18: 
          { return OCamlTokenTypes.HASH;
          }
        case 150: break;
        case 121: 
          { return OCamlTokenTypes.MUTABLE_KEYWORD;
          }
        case 151: break;
        case 49: 
          { return OCamlTokenTypes.COLON_GT;
          }
        case 152: break;
        case 105: 
          { return OCamlTokenTypes.FALSE_KEYWORD;
          }
        case 153: break;
        case 1: 
          { return OCamlTokenTypes.BAD_CHARACTER;
          }
        case 154: break;
        case 63: 
          { return OCamlTokenTypes.QUEST_QUEST;
          }
        case 155: break;
        case 56: 
          { return OCamlTokenTypes.GT_GT;
          }
        case 156: break;
        case 116: 
          { return OCamlTokenTypes.METHOD_KEYWORD;
          }
        case 157: break;
        case 88: 
          { return OCamlTokenTypes.ASR_KEYWORD;
          }
        case 158: break;
        case 76: 
          { yypushback(1);
                              yybegin(CHARACTER_HAS_BEEN_READ);
                              return OCamlTokenTypes.REGULAR_CHARS;
          }
        case 159: break;
        case 125: 
          { return OCamlTokenTypes.EXCEPTION_KEYWORD;
          }
        case 160: break;
        case 99: 
          { return OCamlTokenTypes.TRUE_KEYWORD;
          }
        case 161: break;
        case 80: 
          { return OCamlTokenTypes.LOR_KEYWORD;
          }
        case 162: break;
        case 115: 
          { return OCamlTokenTypes.MODULE_KEYWORD;
          }
        case 163: break;
        case 60: 
          { return OCamlTokenTypes.LT_MINUS;
          }
        case 164: break;
        case 127: 
          { return OCamlTokenTypes.INITIALIZER_KEYWORD;
          }
        case 165: break;
        case 100: 
          { return OCamlTokenTypes.THEN_KEYWORD;
          }
        case 166: break;
        case 112: 
          { return OCamlTokenTypes.DOWNTO_KEYWORD;
          }
        case 167: break;
        case 31: 
          { return OCamlTokenTypes.ACCENT;
          }
        case 168: break;
        case 17: 
          { return OCamlTokenTypes.TILDE;
          }
        case 169: break;
        case 74: 
          { myNestedCommentsDepth++;
                              saveNextTokenStart();
                              yybegin(COMMENT);
                              return OCamlTokenTypes.COMMENT_BEGIN;
          }
        case 170: break;
        case 50: 
          { return OCamlTokenTypes.AS_KEYWORD;
          }
        case 171: break;
        case 123: 
          { return OCamlTokenTypes.FUNCTION_KEYWORD;
          }
        case 172: break;
        case 81: 
          { return OCamlTokenTypes.LET_KEYWORD;
          }
        case 173: break;
        case 93: 
          { yypushback(1);
                              yybegin(CHARACTER_HAS_BEEN_READ);
                              return OCamlTokenTypes.ESCAPE_SEQUENCES;
          }
        case 174: break;
        case 36: 
          { yybegin(YYINITIAL);
                              return OCamlTokenTypes.CLOSING_QUOTE;
          }
        case 175: break;
        case 42: 
          { return OCamlTokenTypes.OR_KEYWORD;
          }
        case 176: break;
        case 9: 
          { return OCamlTokenTypes.UCFC_IDENTIFIER;
          }
        case 177: break;
        case 75: 
          { myNestedCommentsDepth--;
                              if (myNestedCommentsDepth == 0) {
                                yybegin(YYINITIAL);
                              }
                              else {
                                saveNextTokenStart();
                                yybegin(COMMENT);
                              }
                              return OCamlTokenTypes.COMMENT_END;
          }
        case 178: break;
        case 96: 
          { return OCamlTokenTypes.LAZY_KEYWORD;
          }
        case 179: break;
        case 86: 
          { return OCamlTokenTypes.NEW_KEYWORD;
          }
        case 180: break;
        case 55: 
          { return OCamlTokenTypes.AMP_AMP;
          }
        case 181: break;
        case 11: 
          { return OCamlTokenTypes.MINUS;
          }
        case 182: break;
        case 103: 
          { return OCamlTokenTypes.WITH_KEYWORD;
          }
        case 183: break;
        case 117: 
          { return OCamlTokenTypes.FUNCTOR_KEYWORD;
          }
        case 184: break;
        case 104: 
          { return OCamlTokenTypes.WHEN_KEYWORD;
          }
        case 185: break;
        case 30: 
          { return OCamlTokenTypes.VBAR;
          }
        case 186: break;
        case 71: 
          { return OCamlTokenTypes.DOLLAR_DOLLAR;
          }
        case 187: break;
        case 43: 
          { return OCamlTokenTypes.DOT_DOT;
          }
        case 188: break;
        case 26: 
          { return OCamlTokenTypes.RBRACKET;
          }
        case 189: break;
        case 124: 
          { return OCamlTokenTypes.EXTERNAL_KEYWORD;
          }
        case 190: break;
        case 28: 
          { return OCamlTokenTypes.QUEST;
          }
        case 191: break;
        case 61: 
          { return OCamlTokenTypes.LT_COLON;
          }
        case 192: break;
        case 51: 
          { return OCamlTokenTypes.DO_KEYWORD;
          }
        case 193: break;
        case 119: 
          { return OCamlTokenTypes.INHERIT_KEYWORD;
          }
        case 194: break;
        case 108: 
          { return OCamlTokenTypes.WHILE_KEYWORD;
          }
        case 195: break;
        case 67: 
          { return OCamlTokenTypes.VBAR_RBRACKET;
          }
        case 196: break;
        case 73: 
          { yypushback(yylength());
                              restoreSavedTokenStart();
                              yybegin(BEFORE_COMMENT_END);
                              if (yylength() != 0) {
                                return OCamlTokenTypes.COMMENT;
                              }
          }
        case 197: break;
        case 95: 
          { return OCamlTokenTypes.LAND_KEYWORD;
          }
        case 198: break;
        case 110: 
          { return OCamlTokenTypes.OBJECT_KEYWORD;
          }
        case 199: break;
        case 5: 
          { return OCamlTokenTypes.RPAR;
          }
        case 200: break;
        case 15: 
          { return OCamlTokenTypes.INFIX_OPERATOR;
          }
        case 201: break;
        case 7: 
          { return OCamlTokenTypes.UNDERSCORE;
          }
        case 202: break;
        case 24: 
          { return OCamlTokenTypes.SEMICOLON;
          }
        case 203: break;
        case 113: 
          { return OCamlTokenTypes.STRUCT_KEYWORD;
          }
        case 204: break;
        case 45: 
          { return OCamlTokenTypes.MINUS_GT;
          }
        case 205: break;
        case 122: 
          { return OCamlTokenTypes.VIRTUAL_KEYWORD;
          }
        case 206: break;
        case 72: 
          { yypushback(yylength());
                              restoreSavedTokenStart();
                              yybegin(BEFORE_COMMENT_BEGIN);
                              if (yylength() != 0) {
                                return OCamlTokenTypes.COMMENT;
                              }
          }
        case 207: break;
        case 82: 
          { return OCamlTokenTypes.LSL_KEYWORD;
          }
        case 208: break;
        case 114: 
          { return OCamlTokenTypes.PARSER_KEYWORD;
          }
        case 209: break;
        case 29: 
          { return OCamlTokenTypes.LBRACKET;
          }
        case 210: break;
        case 120: 
          { return OCamlTokenTypes.PRIVATE_KEYWORD;
          }
        case 211: break;
        case 65: 
          { return OCamlTokenTypes.LBRACKET_LT;
          }
        case 212: break;
        case 20: 
          { return OCamlTokenTypes.EQ;
          }
        case 213: break;
        case 47: 
          { return OCamlTokenTypes.COLON_COLON;
          }
        case 214: break;
        case 52: 
          { return OCamlTokenTypes.IF_KEYWORD;
          }
        case 215: break;
        case 48: 
          { return OCamlTokenTypes.COLON_EQ;
          }
        case 216: break;
        case 21: 
          { return OCamlTokenTypes.AMP;
          }
        case 217: break;
        case 14: 
          { return OCamlTokenTypes.COLON;
          }
        case 218: break;
        case 3: 
          { return OCamlTokenTypes.LPAR;
          }
        case 219: break;
        case 98: 
          { return OCamlTokenTypes.ELSE_KEYWORD;
          }
        case 220: break;
        case 69: 
          { return OCamlTokenTypes.LBRACE_LT;
          }
        case 221: break;
        case 89: 
          { return OCamlTokenTypes.SIG_KEYWORD;
          }
        case 222: break;
        case 94: 
          { return OCamlTokenTypes.LXOR_KEYWORD;
          }
        case 223: break;
        case 19: 
          { return OCamlTokenTypes.PREFIX_OPERATOR;
          }
        case 224: break;
        case 46: 
          { return OCamlTokenTypes.TO_KEYWORD;
          }
        case 225: break;
        case 62: 
          { return OCamlTokenTypes.LT_LT;
          }
        case 226: break;
        case 8: 
          { return OCamlTokenTypes.LCFC_IDENTIFIER;
          }
        case 227: break;
        case 90: 
          { return OCamlTokenTypes.REC_KEYWORD;
          }
        case 228: break;
        case 13: 
          { yybegin(STRING);
                              return OCamlTokenTypes.OPENING_DOUBLE_QUOTE;
          }
        case 229: break;
        case 126: 
          { return OCamlTokenTypes.CONSTRAINT_KEYWORD;
          }
        case 230: break;
        case 84: 
          { return OCamlTokenTypes.END_KEYWORD;
          }
        case 231: break;
        case 64: 
          { return OCamlTokenTypes.LBRACKET_GT;
          }
        case 232: break;
        case 34: 
          { /* ignore */
          }
        case 233: break;
        case 87: 
          { return OCamlTokenTypes.AND_KEYWORD;
          }
        case 234: break;
        case 6: 
          { return OCamlTokenTypes.INTEGER_LITERAL;
          }
        case 235: break;
        case 78: 
          { return OCamlTokenTypes.FOR_KEYWORD;
          }
        case 236: break;
        case 39: 
          { myNestedCommentsDepth = 1;
                              saveNextTokenStart();
                              yybegin(COMMENT);
                              return OCamlTokenTypes.COMMENT_BEGIN;
          }
        case 237: break;
        case 33: 
          { return OCamlTokenTypes.DOLLAR;
          }
        case 238: break;
        case 101: 
          { return OCamlTokenTypes.TYPE_KEYWORD;
          }
        case 239: break;
        case 83: 
          { return OCamlTokenTypes.LSR_KEYWORD;
          }
        case 240: break;
        case 66: 
          { return OCamlTokenTypes.LBRACKET_VBAR;
          }
        case 241: break;
        case 58: 
          { return OCamlTokenTypes.GT_RBRACE;
          }
        case 242: break;
        case 22: 
          { return OCamlTokenTypes.COMMA;
          }
        case 243: break;
        case 40: 
          { return OCamlTokenTypes.FLOAT_LITERAL;
          }
        case 244: break;
        case 92: 
          { return OCamlTokenTypes.VAL_KEYWORD;
          }
        case 245: break;
        case 107: 
          { return OCamlTokenTypes.CLASS_KEYWORD;
          }
        case 246: break;
        case 27: 
          { return OCamlTokenTypes.RBRACE;
          }
        case 247: break;
        case 77: 
          { return OCamlTokenTypes.ESCAPE_SEQUENCES;
          }
        case 248: break;
        case 53: 
          { return OCamlTokenTypes.IN_KEYWORD;
          }
        case 249: break;
        case 44: 
          { return OCamlTokenTypes.MINUS_DOT;
          }
        case 250: break;
        case 59: 
          { return OCamlTokenTypes.SEMICOLON_SEMICOLON;
          }
        case 251: break;
        case 35: 
          { yypushback(1);
                              yybegin(YYINITIAL);
          }
        case 252: break;
        case 25: 
          { return OCamlTokenTypes.LT;
          }
        case 253: break;
        case 4: 
          { return OCamlTokenTypes.MULT;
          }
        case 254: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case COMMENT: {
              restoreSavedTokenStart();
                              yybegin(YYINITIAL);
                              if (yylength() != 0) {
                                return OCamlTokenTypes.COMMENT;
                              }
            }
            case 318: break;
            default:
              {
                yybegin(YYINITIAL);
                              return null;
              }
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
