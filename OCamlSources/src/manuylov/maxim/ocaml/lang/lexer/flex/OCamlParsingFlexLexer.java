/* The following code was generated by JFlex 1.4.1 on 08.05.10 17:23 */

/*
 * OCaml Support For IntelliJ Platform.
 * Copyright (C) 2010 Maxim Manuylov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/gpl-2.0.html>.
 */

package manuylov.maxim.ocaml.lang.lexer.flex;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import manuylov.maxim.ocaml.lang.lexer.token.OCamlTokenTypes;

import java.util.Map;
import java.util.HashMap;             

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 08.05.10 17:23 from the specification file
 * <tt>E:/Perforce/OCamlPlugin/LexerGeneration/src/parsing-lexer-specification.flex</tt>
 */
public class OCamlParsingFlexLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 1;
  public static final int BEFORE_COMMENT_END = 3;
  public static final int BEFORE_COMMENT_BEGIN = 2;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\31\1\67\1\34"+
    "\1\46\1\105\1\43\1\71\1\33\1\4\1\6\1\5\1\44\1\72"+
    "\1\26\1\24\1\43\1\15\1\13\6\12\2\7\1\42\1\74\1\75"+
    "\1\70\1\73\1\100\1\43\1\36\1\23\2\36\1\40\1\36\5\35"+
    "\1\37\2\35\1\21\10\35\1\17\2\35\1\101\1\27\1\76\1\43"+
    "\1\10\1\103\1\47\1\22\1\55\1\50\1\25\1\11\1\53\1\61"+
    "\1\54\1\65\1\41\1\14\1\64\1\32\1\20\1\57\1\41\1\52"+
    "\1\51\1\30\1\60\1\66\1\56\1\16\1\63\1\62\1\104\1\102"+
    "\1\77\1\45\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\2\10\1\6\1\10\1\11\2\10\1\12\1\10\1\13"+
    "\2\10\1\14\1\1\1\15\1\16\1\17\1\20\1\21"+
    "\12\10\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\3\41\2\1\1\42\1\6\1\43\1\0\10\10\3\0"+
    "\1\44\1\10\1\45\2\10\1\46\3\10\1\47\1\50"+
    "\1\51\4\10\2\0\1\52\2\0\1\53\1\54\1\55"+
    "\1\56\1\22\1\0\1\2\1\10\1\57\1\60\3\10"+
    "\1\61\1\62\14\10\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107"+
    "\1\110\1\43\1\0\1\111\1\10\1\112\1\10\1\113"+
    "\1\114\2\10\1\115\1\116\3\6\6\10\1\117\1\10"+
    "\1\120\2\10\1\121\1\122\4\0\1\2\1\0\1\123"+
    "\1\10\1\124\3\10\1\125\1\126\12\10\1\127\3\10"+
    "\1\130\3\10\1\131\1\132\1\133\1\10\1\134\1\10"+
    "\1\135\2\10\1\136\1\137\1\140\5\0\1\10\1\141"+
    "\7\10\1\142\1\143\10\10\1\144\2\10\1\145\2\10"+
    "\2\0\6\10\1\146\1\10\1\147\4\10\1\150\4\10"+
    "\1\151\2\10\2\0\1\152\1\153\1\154\4\10\1\155"+
    "\1\10\1\156\1\157\2\10\1\160\4\10\1\161\1\162"+
    "\1\10\1\163\1\164\1\165\1\166\1\167\3\10\1\170"+
    "\3\10\1\171\1\172";

  private static int [] zzUnpackAction() {
    int [] result = new int[308];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u0118\0\u01a4"+
    "\0\u01ea\0\u0118\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u0276"+
    "\0\u038e\0\u03d4\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578"+
    "\0\u05be\0\u0604\0\u064a\0\u01ea\0\u01ea\0\u0690\0\u06d6\0\u071c"+
    "\0\u0762\0\u07a8\0\u07ee\0\u0834\0\u087a\0\u08c0\0\u0906\0\u094c"+
    "\0\u0992\0\u09d8\0\u01ea\0\u0a1e\0\u0118\0\u0a64\0\u0aaa\0\u0af0"+
    "\0\u0118\0\u0118\0\u0b36\0\u0b7c\0\u0bc2\0\u0118\0\u0c08\0\u0c4e"+
    "\0\u0118\0\u0c94\0\u0cda\0\u0d20\0\u0d66\0\u0118\0\u0118\0\u0dac"+
    "\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50\0\u0f96\0\u0fdc"+
    "\0\u1022\0\u1068\0\u10ae\0\u10f4\0\u0276\0\u113a\0\u0276\0\u1180"+
    "\0\u11c6\0\u0118\0\u120c\0\u1252\0\u1298\0\u01ea\0\u01ea\0\u0276"+
    "\0\u12de\0\u1324\0\u136a\0\u13b0\0\u13f6\0\u143c\0\u0118\0\u0604"+
    "\0\u1482\0\u0118\0\u0118\0\u0118\0\u0118\0\u0690\0\u06d6\0\u14c8"+
    "\0\u150e\0\u1554\0\u159a\0\u15e0\0\u1626\0\u166c\0\u0276\0\u16b2"+
    "\0\u16f8\0\u173e\0\u1784\0\u17ca\0\u1810\0\u1856\0\u189c\0\u18e2"+
    "\0\u1928\0\u196e\0\u19b4\0\u19fa\0\u0690\0\u01ea\0\u01ea\0\u0118"+
    "\0\u0118\0\u0118\0\u01ea\0\u01ea\0\u01ea\0\u0690\0\u0118\0\u0118"+
    "\0\u0118\0\u0118\0\u01ea\0\u0118\0\u01ea\0\u01ea\0\u0118\0\u0118"+
    "\0\u0118\0\u0118\0\u1a40\0\u1a86\0\u0276\0\u1acc\0\u1b12\0\u1b58"+
    "\0\u0276\0\u0276\0\u1b9e\0\u1be4\0\u0276\0\u0276\0\u1c2a\0\u1c70"+
    "\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88\0\u1dce\0\u1e14\0\u1e5a\0\u0276"+
    "\0\u1ea0\0\u0276\0\u1ee6\0\u1f2c\0\u0276\0\u0118\0\u1f72\0\u1fb8"+
    "\0\u1ffe\0\u2044\0\u208a\0\u20d0\0\u0276\0\u2116\0\u0276\0\u215c"+
    "\0\u21a2\0\u21e8\0\u0276\0\u0276\0\u222e\0\u2274\0\u22ba\0\u2300"+
    "\0\u2346\0\u238c\0\u23d2\0\u2418\0\u245e\0\u24a4\0\u24ea\0\u2530"+
    "\0\u2576\0\u25bc\0\u0276\0\u2602\0\u2648\0\u268e\0\u0276\0\u0276"+
    "\0\u0276\0\u26d4\0\u0276\0\u271a\0\u0276\0\u2760\0\u27a6\0\u0276"+
    "\0\u0276\0\u0276\0\u27ec\0\u2832\0\u2878\0\u28be\0\u2904\0\u294a"+
    "\0\u0276\0\u2990\0\u29d6\0\u2a1c\0\u2a62\0\u2aa8\0\u2aee\0\u2b34"+
    "\0\u0276\0\u0276\0\u2b7a\0\u2bc0\0\u2c06\0\u2c4c\0\u2c92\0\u2cd8"+
    "\0\u2d1e\0\u2d64\0\u0276\0\u2daa\0\u2df0\0\u0276\0\u2e36\0\u2e7c"+
    "\0\u2ec2\0\u2f08\0\u2f4e\0\u2f94\0\u2fda\0\u3020\0\u3066\0\u30ac"+
    "\0\u0276\0\u30f2\0\u0276\0\u3138\0\u317e\0\u31c4\0\u320a\0\u0276"+
    "\0\u3250\0\u3296\0\u32dc\0\u3322\0\u0276\0\u3368\0\u33ae\0\u33f4"+
    "\0\u343a\0\u0276\0\u0276\0\u0276\0\u3480\0\u34c6\0\u350c\0\u3552"+
    "\0\u0276\0\u3598\0\u0276\0\u0276\0\u35de\0\u3624\0\u0276\0\u366a"+
    "\0\u36b0\0\u36f6\0\u373c\0\u0276\0\u0276\0\u3782\0\u0276\0\u0276"+
    "\0\u0276\0\u0276\0\u0276\0\u37c8\0\u380e\0\u3854\0\u0276\0\u389a"+
    "\0\u38e0\0\u3926\0\u0276\0\u0276";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[308];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\2\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\2\13\1\16\1\17\1\20\1\21\1\22\1\21"+
    "\1\23\1\21\1\24\1\25\1\26\1\5\1\27\1\7"+
    "\1\30\1\31\1\32\4\21\1\20\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\20\1\44"+
    "\1\45\1\46\1\47\4\20\1\50\1\20\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\4\71\1\72"+
    "\1\73\100\71\4\5\1\74\106\5\1\75\100\5\110\0"+
    "\1\7\110\0\1\76\105\0\1\34\16\0\1\34\1\0"+
    "\1\34\13\0\4\34\21\0\5\34\1\0\1\34\2\0"+
    "\1\34\1\0\1\34\2\0\1\34\7\0\2\13\1\0"+
    "\2\13\1\77\1\13\6\0\1\100\1\101\4\0\1\77"+
    "\4\0\1\77\1\101\54\0\15\20\1\0\1\20\2\0"+
    "\1\20\1\0\2\20\1\0\5\20\5\0\20\20\26\0"+
    "\11\20\1\102\3\20\1\0\1\20\2\0\1\20\1\0"+
    "\2\20\1\0\5\20\5\0\1\103\10\20\1\104\6\20"+
    "\26\0\7\20\1\105\1\20\1\106\3\20\1\0\1\107"+
    "\2\0\1\20\1\0\2\20\1\0\5\20\5\0\1\110"+
    "\1\20\1\111\15\20\26\0\2\13\1\0\2\13\1\77"+
    "\1\13\2\112\2\113\2\114\1\100\1\101\4\0\1\77"+
    "\4\0\1\77\1\101\54\0\15\21\1\0\1\21\2\0"+
    "\1\21\1\0\2\21\1\0\5\21\5\0\20\21\26\0"+
    "\2\20\1\115\10\20\1\116\1\20\1\0\1\20\2\0"+
    "\1\20\1\0\2\20\1\0\5\20\5\0\3\20\1\117"+
    "\4\20\1\120\7\20\26\0\15\20\1\0\1\121\2\0"+
    "\1\20\1\0\2\20\1\0\5\20\5\0\20\20\43\0"+
    "\1\122\70\0\5\20\1\123\1\20\1\124\5\20\1\0"+
    "\1\20\2\0\1\20\1\0\1\125\1\20\1\0\5\20"+
    "\5\0\20\20\24\0\1\34\16\0\1\126\1\0\1\34"+
    "\13\0\4\34\21\0\4\34\1\127\1\0\1\34\2\0"+
    "\1\34\1\0\1\34\2\0\1\34\7\0\11\20\1\130"+
    "\3\20\1\0\1\20\2\0\1\20\1\0\2\20\1\0"+
    "\5\20\5\0\3\20\1\131\6\20\1\132\1\20\1\133"+
    "\3\20\26\0\15\20\1\0\1\134\2\0\1\20\1\0"+
    "\2\20\1\0\5\20\5\0\20\20\17\0\27\135\1\136"+
    "\3\135\1\137\52\135\27\140\1\141\4\140\1\142\51\140"+
    "\42\0\1\143\25\0\1\144\2\0\1\145\17\0\1\146"+
    "\16\0\1\146\1\0\1\146\13\0\4\146\21\0\5\146"+
    "\1\0\1\146\2\0\1\146\1\0\1\146\2\0\1\146"+
    "\1\0\3\147\3\0\1\150\2\0\2\150\1\0\1\150"+
    "\13\0\1\147\63\0\15\20\1\0\1\20\2\0\1\20"+
    "\1\0\1\151\1\20\1\0\5\20\5\0\2\20\1\152"+
    "\15\20\26\0\11\20\1\153\3\20\1\0\1\20\2\0"+
    "\1\20\1\0\2\20\1\0\5\20\5\0\20\20\26\0"+
    "\15\20\1\0\1\20\2\0\1\154\1\0\2\20\1\0"+
    "\5\20\5\0\5\20\1\155\12\20\26\0\15\20\1\0"+
    "\1\156\2\0\1\20\1\0\2\20\1\0\5\20\5\0"+
    "\20\20\26\0\2\20\1\157\12\20\1\0\1\20\2\0"+
    "\1\20\1\0\1\160\1\20\1\0\5\20\5\0\20\20"+
    "\26\0\5\20\1\161\3\20\1\162\3\20\1\0\1\20"+
    "\2\0\1\20\1\0\2\20\1\0\5\20\5\0\20\20"+
    "\26\0\15\20\1\0\1\20\2\0\1\20\1\0\2\20"+
    "\1\0\5\20\5\0\5\20\1\163\4\20\1\164\5\20"+
    "\26\0\15\20\1\0\1\20\2\0\1\20\1\0\2\20"+
    "\1\0\5\20\5\0\1\165\2\20\1\166\14\20\26\0"+
    "\11\20\1\167\3\20\1\0\1\170\2\0\1\20\1\0"+
    "\2\20\1\0\5\20\5\0\1\171\10\20\1\172\6\20"+
    "\26\0\15\20\1\0\1\20\2\0\1\20\1\0\2\20"+
    "\1\0\5\20\5\0\1\173\4\20\1\174\12\20\24\0"+
    "\1\146\16\0\1\146\1\0\1\146\13\0\4\146\21\0"+
    "\1\146\1\175\3\146\1\0\1\146\2\0\1\146\1\0"+
    "\1\146\2\0\1\146\5\0\1\34\16\0\1\34\1\0"+
    "\1\34\13\0\4\34\21\0\2\34\1\176\2\34\1\0"+
    "\1\34\2\0\1\34\1\0\1\34\2\0\1\34\5\0"+
    "\1\34\16\0\1\34\1\0\1\34\13\0\4\34\21\0"+
    "\4\34\1\177\1\0\1\34\1\200\1\201\1\34\1\0"+
    "\1\34\2\0\1\34\74\0\1\202\16\0\1\34\16\0"+
    "\1\34\1\0\1\203\13\0\1\204\3\34\21\0\5\34"+
    "\1\0\1\205\2\0\1\34\1\0\1\34\2\0\1\34"+
    "\5\0\1\146\16\0\1\146\1\0\1\146\13\0\4\146"+
    "\21\0\5\146\1\0\1\146\2\0\1\206\1\0\1\146"+
    "\2\0\1\146\73\0\1\207\1\0\1\210\4\0\1\211"+
    "\10\0\1\34\16\0\1\34\1\0\1\34\13\0\4\34"+
    "\21\0\5\34\1\0\1\34\1\212\1\0\1\34\1\0"+
    "\1\213\2\0\1\34\75\0\1\214\15\0\1\34\16\0"+
    "\1\34\1\0\1\34\13\0\1\215\3\34\21\0\5\34"+
    "\1\0\1\34\2\0\1\34\1\0\1\34\2\0\1\216"+
    "\5\0\1\217\106\0\1\220\104\0\1\221\106\0\1\222"+
    "\106\0\2\100\1\0\2\100\1\0\1\100\7\0\1\101"+
    "\12\0\1\101\54\0\1\223\2\0\2\223\1\0\1\223"+
    "\10\0\1\224\15\0\1\224\50\0\15\20\1\0\1\20"+
    "\2\0\1\20\1\0\2\20\1\0\5\20\5\0\3\20"+
    "\1\225\14\20\26\0\5\20\1\226\7\20\1\0\1\20"+
    "\2\0\1\20\1\0\2\20\1\0\5\20\5\0\20\20"+
    "\26\0\15\20\1\0\1\20\2\0\1\20\1\0\1\227"+
    "\1\20\1\0\5\20\5\0\20\20\26\0\11\20\1\230"+
    "\3\20\1\0\1\20\2\0\1\20\1\0\2\20\1\0"+
    "\5\20\5\0\20\20\26\0\15\20\1\0\1\20\2\0"+
    "\1\20\1\0\2\20\1\0\5\20\5\0\3\20\1\231"+
    "\14\20\26\0\15\20\1\0\1\20\2\0\1\232\1\0"+
    "\2\20\1\0\5\20\5\0\20\20\26\0\15\20\1\0"+
    "\1\20\2\0\1\20\1\0\1\233\1\20\1\0\5\20"+
    "\5\0\13\20\1\234\4\20\26\0\5\20\1\235\7\20"+
    "\1\0\1\20\2\0\1\20\1\0\2\20\1\0\5\20"+
    "\5\0\3\20\1\236\14\20\26\0\1\237\1\0\3\237"+
    "\1\0\1\237\4\0\2\237\1\0\1\237\10\0\1\237"+
    "\1\0\1\237\6\0\2\237\4\0\1\237\42\0\2\240"+
    "\1\0\1\240\103\0\1\241\1\0\1\241\77\0\15\20"+
    "\1\0\1\20\2\0\1\20\1\0\2\20\1\0\5\20"+
    "\5\0\16\20\1\242\1\20\26\0\15\20\1\0\1\243"+
    "\2\0\1\20\1\0\2\20\1\0\5\20\5\0\20\20"+
    "\26\0\15\20\1\0\1\20\2\0\1\20\1\0\2\20"+
    "\1\0\5\20\5\0\4\20\1\244\13\20\26\0\15\20"+
    "\1\0\1\20\2\0\1\20\1\0\2\20\1\0\5\20"+
    "\5\0\2\20\1\245\15\20\26\0\15\20\1\0\1\20"+
    "\2\0\1\246\1\0\2\20\1\0\5\20\5\0\6\20"+
    "\1\247\11\20\26\0\15\20\1\0\1\20\2\0\1\20"+
    "\1\0\2\20\1\0\5\20\5\0\1\20\1\250\16\20"+
    "\26\0\15\20\1\0\1\20\2\0\1\20\1\0\2\20"+
    "\1\0\5\20\5\0\11\20\1\251\2\20\1\252\3\20"+
    "\26\0\15\20\1\0\1\253\2\0\1\20\1\0\2\20"+
    "\1\0\5\20\5\0\20\20\26\0\15\20\1\0\1\20"+
    "\2\0\1\20\1\0\2\20\1\0\5\20\5\0\10\20"+
    "\1\254\7\20\26\0\15\20\1\0\1\20\2\0\1\20"+
    "\1\0\2\20\1\0\5\20\5\0\7\20\1\255\10\20"+
    "\52\0\1\256\61\0\1\257\2\0\2\257\1\0\1\257"+
    "\1\260\3\0\1\135\4\0\6\135\15\0\1\135\34\0"+
    "\2\140\4\0\1\261\2\0\2\261\1\0\1\261\1\262"+
    "\3\0\1\140\4\0\6\140\15\0\1\140\34\0\3\263"+
    "\3\0\1\150\2\0\2\150\1\0\1\150\13\0\1\263"+
    "\2\0\1\264\60\0\15\20\1\0\1\20\2\0\1\20"+
    "\1\0\2\20\1\0\5\20\5\0\1\20\1\265\16\20"+
    "\26\0\15\20\1\0\1\20\2\0\1\20\1\0\2\20"+
    "\1\0\5\20\5\0\2\20\1\266\1\267\14\20\26\0"+
    "\15\20\1\0\1\20\2\0\1\20\1\0\1\270\1\20"+
    "\1\0\5\20\5\0\7\20\1\271\10\20\26\0\15\20"+
    "\1\0\1\20\2\0\1\20\1\0\2\20\1\0\5\20"+
    "\5\0\3\20\1\272\14\20\26\0\15\20\1\0\1\20"+
    "\2\0\1\20\1\0\2\20\1\0\5\20\5\0\4\20"+
    "\1\273\13\20\26\0\15\20\1\0\1\20\2\0\1\20"+
    "\1\0\2\20\1\0\5\20\5\0\6\20\1\274\11\20"+
    "\26\0\15\20\1\0\1\20\2\0\1\20\1\0\2\20"+
    "\1\0\5\20\5\0\5\20\1\275\1\276\3\20\1\277"+
    "\5\20\26\0\15\20\1\0\1\20\2\0\1\20\1\0"+
    "\2\20\1\0\5\20\5\0\1\300\17\20\26\0\15\20"+
    "\1\0\1\20\2\0\1\20\1\0\1\301\1\20\1\0"+
    "\5\20\5\0\20\20\26\0\15\20\1\0\1\20\2\0"+
    "\1\302\1\0\2\20\1\0\5\20\5\0\20\20\26\0"+
    "\15\20\1\0\1\303\2\0\1\20\1\0\2\20\1\0"+
    "\5\20\5\0\5\20\1\304\12\20\26\0\15\20\1\0"+
    "\1\20\2\0\1\20\1\0\2\20\1\0\5\20\5\0"+
    "\3\20\1\305\14\20\26\0\15\20\1\0\1\20\2\0"+
    "\1\20\1\0\2\20\1\0\5\20\5\0\5\20\1\306"+
    "\12\20\26\0\15\20\1\0\1\20\2\0\1\20\1\0"+
    "\2\20\1\0\5\20\5\0\1\20\1\307\16\20\26\0"+
    "\15\20\1\0\1\20\2\0\1\310\1\0\2\20\1\0"+
    "\5\20\5\0\20\20\26\0\15\20\1\0\1\20\2\0"+
    "\1\311\1\0\2\20\1\0\5\20\5\0\20\20\26\0"+
    "\15\20\1\0\1\20\2\0\1\312\1\0\2\20\1\0"+
    "\5\20\5\0\20\20\26\0\5\20\1\313\7\20\1\0"+
    "\1\20\2\0\1\20\1\0\2\20\1\0\5\20\5\0"+
    "\20\20\26\0\15\20\1\0\1\20\2\0\1\20\1\0"+
    "\2\20\1\0\5\20\5\0\3\20\1\314\14\20\26\0"+
    "\2\223\1\0\2\223\1\0\1\223\77\0\1\223\2\0"+
    "\2\223\1\0\1\223\77\0\15\20\1\0\1\20\2\0"+
    "\1\20\1\0\2\20\1\0\5\20\5\0\2\20\1\315"+
    "\15\20\26\0\15\20\1\0\1\20\2\0\1\20\1\0"+
    "\2\20\1\0\5\20\5\0\6\20\1\316\11\20\26\0"+
    "\15\20\1\0\1\20\2\0\1\20\1\0\2\20\1\0"+
    "\5\20\5\0\3\20\1\317\14\20\26\0\15\20\1\0"+
    "\1\20\2\0\1\20\1\0\2\20\1\0\5\20\5\0"+
    "\1\20\1\320\16\20\26\0\15\20\1\0\1\20\2\0"+
    "\1\20\1\0\2\20\1\0\5\20\5\0\14\20\1\321"+
    "\3\20\26\0\5\237\1\77\1\237\4\0\2\237\1\0"+
    "\1\237\4\0\1\77\3\0\1\237\1\77\1\237\6\0"+
    "\2\237\4\0\1\237\40\0\1\240\1\0\2\240\1\77"+
    "\1\240\14\0\1\77\4\0\1\77\56\0\1\241\2\0"+
    "\1\241\1\77\1\241\14\0\1\77\4\0\1\77\55\0"+
    "\15\20\1\0\1\322\2\0\1\20\1\0\2\20\1\0"+
    "\5\20\5\0\20\20\26\0\15\20\1\0\1\20\2\0"+
    "\1\20\1\0\1\323\1\20\1\0\5\20\5\0\20\20"+
    "\26\0\15\20\1\0\1\20\2\0\1\20\1\0\2\20"+
    "\1\0\5\20\5\0\5\20\1\324\12\20\26\0\15\20"+
    "\1\0\1\325\2\0\1\20\1\0\2\20\1\0\5\20"+
    "\5\0\20\20\26\0\15\20\1\0\1\326\2\0\1\20"+
    "\1\0\2\20\1\0\5\20\5\0\20\20\26\0\15\20"+
    "\1\0\1\327\2\0\1\20\1\0\2\20\1\0\5\20"+
    "\5\0\20\20\26\0\15\20\1\0\1\330\2\0\1\20"+
    "\1\0\2\20\1\0\5\20\5\0\20\20\26\0\15\20"+
    "\1\0\1\20\2\0\1\20\1\0\1\331\1\20\1\0"+
    "\5\20\5\0\20\20\26\0\15\20\1\0\1\332\2\0"+
    "\1\20\1\0\2\20\1\0\5\20\5\0\20\20\26\0"+
    "\1\333\2\0\2\333\1\0\1\333\77\0\1\334\1\0"+
    "\3\334\1\0\1\334\4\0\2\334\1\0\1\334\10\0"+
    "\1\334\1\0\1\334\6\0\2\334\4\0\1\334\37\0"+
    "\1\335\2\0\2\335\1\0\1\335\77\0\1\336\1\0"+
    "\3\336\1\0\1\336\4\0\2\336\1\0\1\336\10\0"+
    "\1\336\1\0\1\336\6\0\2\336\4\0\1\336\31\0"+
    "\3\263\25\0\1\263\2\0\1\264\51\0\27\264\1\337"+
    "\4\264\1\7\51\264\7\0\15\20\1\0\1\340\2\0"+
    "\1\20\1\0\2\20\1\0\5\20\5\0\20\20\26\0"+
    "\15\20\1\0\1\341\2\0\1\20\1\0\2\20\1\0"+
    "\5\20\5\0\20\20\26\0\15\20\1\0\1\20\2\0"+
    "\1\20\1\0\1\342\1\20\1\0\5\20\5\0\20\20"+
    "\26\0\15\20\1\0\1\20\2\0\1\20\1\0\2\20"+
    "\1\0\5\20\5\0\11\20\1\343\6\20\26\0\15\20"+
    "\1\0\1\20\2\0\1\344\1\0\2\20\1\0\5\20"+
    "\5\0\20\20\26\0\5\20\1\345\7\20\1\0\1\20"+
    "\2\0\1\20\1\0\2\20\1\0\5\20\5\0\20\20"+
    "\26\0\15\20\1\0\1\346\2\0\1\20\1\0\2\20"+
    "\1\0\5\20\5\0\20\20\26\0\15\20\1\0\1\20"+
    "\2\0\1\20\1\0\2\20\1\0\5\20\5\0\2\20"+
    "\1\347\15\20\26\0\15\20\1\0\1\20\2\0\1\20"+
    "\1\0\2\20\1\0\5\20\5\0\2\20\1\350\15\20"+
    "\26\0\15\20\1\0\1\20\2\0\1\20\1\0\2\20"+
    "\1\0\5\20\5\0\12\20\1\351\5\20\26\0\15\20"+
    "\1\0\1\20\2\0\1\20\1\0\1\352\1\20\1\0"+
    "\5\20\5\0\20\20\26\0\5\20\1\353\7\20\1\0"+
    "\1\20\2\0\1\20\1\0\2\20\1\0\5\20\5\0"+
    "\20\20\26\0\15\20\1\0\1\20\2\0\1\20\1\0"+
    "\2\20\1\0\5\20\5\0\2\20\1\354\15\20\26\0"+
    "\15\20\1\0\1\20\2\0\1\20\1\0\2\20\1\0"+
    "\5\20\5\0\17\20\1\355\26\0\15\20\1\0\1\20"+
    "\2\0\1\20\1\0\2\20\1\0\5\20\5\0\11\20"+
    "\1\356\6\20\26\0\15\20\1\0\1\20\2\0\1\20"+
    "\1\0\2\20\1\0\5\20\5\0\12\20\1\357\5\20"+
    "\26\0\15\20\1\0\1\20\2\0\1\20\1\0\2\20"+
    "\1\0\5\20\5\0\6\20\1\360\11\20\26\0\15\20"+
    "\1\0\1\20\2\0\1\20\1\0\2\20\1\0\5\20"+
    "\5\0\1\361\17\20\26\0\15\20\1\0\1\20\2\0"+
    "\1\362\1\0\2\20\1\0\5\20\5\0\20\20\26\0"+
    "\15\20\1\0\1\363\2\0\1\20\1\0\2\20\1\0"+
    "\5\20\5\0\20\20\26\0\15\20\1\0\1\20\2\0"+
    "\1\364\1\0\2\20\1\0\5\20\5\0\20\20\26\0"+
    "\15\20\1\0\1\20\2\0\1\20\1\0\2\20\1\0"+
    "\5\20\5\0\6\20\1\365\11\20\26\0\15\20\1\0"+
    "\1\20\2\0\1\20\1\0\1\366\1\20\1\0\5\20"+
    "\5\0\20\20\26\0\15\20\1\0\1\20\2\0\1\20"+
    "\1\0\2\20\1\0\5\20\5\0\3\20\1\367\14\20"+
    "\26\0\15\20\1\0\1\20\2\0\1\20\1\0\2\20"+
    "\1\0\5\20\5\0\10\20\1\370\7\20\26\0\1\135"+
    "\2\0\2\135\1\0\1\135\77\0\1\135\1\0\3\135"+
    "\1\0\1\135\4\0\2\135\1\0\1\135\10\0\1\135"+
    "\1\0\1\135\6\0\2\135\4\0\1\135\37\0\1\140"+
    "\2\0\2\140\1\0\1\140\77\0\1\140\1\0\3\140"+
    "\1\0\1\140\4\0\2\140\1\0\1\140\10\0\1\140"+
    "\1\0\1\140\6\0\2\140\4\0\1\140\37\0\1\371"+
    "\2\0\2\371\1\0\1\371\1\372\3\0\1\264\4\0"+
    "\6\264\15\0\1\264\42\0\15\20\1\0\1\20\2\0"+
    "\1\20\1\0\2\20\1\0\5\20\5\0\3\20\1\373"+
    "\14\20\26\0\15\20\1\0\1\20\2\0\1\374\1\0"+
    "\2\20\1\0\5\20\5\0\20\20\26\0\15\20\1\0"+
    "\1\20\2\0\1\20\1\0\2\20\1\0\5\20\5\0"+
    "\6\20\1\375\11\20\26\0\15\20\1\0\1\20\2\0"+
    "\1\20\1\0\2\20\1\0\5\20\5\0\5\20\1\376"+
    "\12\20\26\0\15\20\1\0\1\20\2\0\1\20\1\0"+
    "\2\20\1\0\5\20\5\0\11\20\1\377\6\20\26\0"+
    "\15\20\1\0\1\20\2\0\1\20\1\0\2\20\1\0"+
    "\5\20\5\0\3\20\1\u0100\14\20\26\0\15\20\1\0"+
    "\1\20\2\0\1\20\1\0\2\20\1\0\5\20\5\0"+
    "\2\20\1\u0101\15\20\26\0\15\20\1\0\1\20\2\0"+
    "\1\u0102\1\0\2\20\1\0\5\20\5\0\20\20\26\0"+
    "\15\20\1\0\1\u0103\2\0\1\20\1\0\2\20\1\0"+
    "\5\20\5\0\20\20\26\0\15\20\1\0\1\u0104\2\0"+
    "\1\20\1\0\2\20\1\0\5\20\5\0\20\20\26\0"+
    "\15\20\1\0\1\20\2\0\1\20\1\0\2\20\1\0"+
    "\5\20\5\0\1\u0105\17\20\26\0\5\20\1\u0106\7\20"+
    "\1\0\1\20\2\0\1\20\1\0\2\20\1\0\5\20"+
    "\5\0\20\20\26\0\11\20\1\u0107\3\20\1\0\1\20"+
    "\2\0\1\20\1\0\2\20\1\0\5\20\5\0\20\20"+
    "\26\0\15\20\1\0\1\20\2\0\1\20\1\0\2\20"+
    "\1\0\5\20\5\0\12\20\1\u0108\5\20\26\0\13\20"+
    "\1\u0109\1\20\1\0\1\20\2\0\1\20\1\0\2\20"+
    "\1\0\5\20\5\0\20\20\26\0\15\20\1\0\1\20"+
    "\2\0\1\20\1\0\2\20\1\0\5\20\5\0\11\20"+
    "\1\u010a\6\20\26\0\11\20\1\u010b\3\20\1\0\1\20"+
    "\2\0\1\20\1\0\2\20\1\0\5\20\5\0\5\20"+
    "\1\u010c\12\20\26\0\15\20\1\0\1\20\2\0\1\u010d"+
    "\1\0\2\20\1\0\5\20\5\0\20\20\26\0\15\20"+
    "\1\0\1\20\2\0\1\20\1\0\1\u010e\1\20\1\0"+
    "\5\20\5\0\20\20\26\0\15\20\1\0\1\20\2\0"+
    "\1\u010f\1\0\2\20\1\0\5\20\5\0\20\20\26\0"+
    "\1\u0110\2\0\2\u0110\1\0\1\u0110\77\0\1\u0111\1\0"+
    "\3\u0111\1\0\1\u0111\4\0\2\u0111\1\0\1\u0111\10\0"+
    "\1\u0111\1\0\1\u0111\6\0\2\u0111\4\0\1\u0111\37\0"+
    "\15\20\1\0\1\20\2\0\1\u0112\1\0\2\20\1\0"+
    "\5\20\5\0\20\20\26\0\11\20\1\u0113\3\20\1\0"+
    "\1\20\2\0\1\20\1\0\2\20\1\0\5\20\5\0"+
    "\20\20\26\0\15\20\1\0\1\20\2\0\1\u0114\1\0"+
    "\2\20\1\0\5\20\5\0\20\20\26\0\15\20\1\0"+
    "\1\20\2\0\1\20\1\0\2\20\1\0\5\20\5\0"+
    "\1\u0115\17\20\26\0\15\20\1\0\1\20\2\0\1\20"+
    "\1\0\2\20\1\0\5\20\5\0\1\20\1\u0116\16\20"+
    "\26\0\15\20\1\0\1\20\2\0\1\20\1\0\2\20"+
    "\1\0\5\20\5\0\5\20\1\u0117\12\20\26\0\15\20"+
    "\1\0\1\20\2\0\1\20\1\0\2\20\1\0\5\20"+
    "\5\0\3\20\1\u0118\14\20\26\0\15\20\1\0\1\20"+
    "\2\0\1\20\1\0\2\20\1\0\5\20\5\0\3\20"+
    "\1\u0119\14\20\26\0\15\20\1\0\1\20\2\0\1\u011a"+
    "\1\0\2\20\1\0\5\20\5\0\20\20\26\0\15\20"+
    "\1\0\1\u011b\2\0\1\20\1\0\2\20\1\0\5\20"+
    "\5\0\20\20\26\0\15\20\1\0\1\20\2\0\1\20"+
    "\1\0\2\20\1\0\5\20\5\0\1\20\1\u011c\16\20"+
    "\26\0\5\20\1\u011d\7\20\1\0\1\20\2\0\1\20"+
    "\1\0\2\20\1\0\5\20\5\0\20\20\26\0\15\20"+
    "\1\0\1\20\2\0\1\20\1\0\2\20\1\0\5\20"+
    "\5\0\1\u011e\17\20\26\0\15\20\1\0\1\20\2\0"+
    "\1\20\1\0\2\20\1\0\5\20\5\0\3\20\1\u011f"+
    "\14\20\26\0\11\20\1\u0120\3\20\1\0\1\20\2\0"+
    "\1\20\1\0\2\20\1\0\5\20\5\0\20\20\26\0"+
    "\15\20\1\0\1\20\2\0\1\20\1\0\2\20\1\0"+
    "\5\20\5\0\1\u0121\17\20\26\0\15\20\1\0\1\20"+
    "\2\0\1\20\1\0\2\20\1\0\5\20\5\0\5\20"+
    "\1\u0122\12\20\26\0\1\264\2\0\2\264\1\0\1\264"+
    "\77\0\1\264\1\0\3\264\1\0\1\264\4\0\2\264"+
    "\1\0\1\264\10\0\1\264\1\0\1\264\6\0\2\264"+
    "\4\0\1\264\37\0\5\20\1\u0123\7\20\1\0\1\20"+
    "\2\0\1\20\1\0\2\20\1\0\5\20\5\0\20\20"+
    "\26\0\15\20\1\0\1\u0124\2\0\1\20\1\0\2\20"+
    "\1\0\5\20\5\0\20\20\26\0\15\20\1\0\1\20"+
    "\2\0\1\u0125\1\0\2\20\1\0\5\20\5\0\20\20"+
    "\26\0\15\20\1\0\1\20\2\0\1\20\1\0\2\20"+
    "\1\0\5\20\5\0\1\u0126\17\20\26\0\15\20\1\0"+
    "\1\u0127\2\0\1\20\1\0\2\20\1\0\5\20\5\0"+
    "\20\20\26\0\15\20\1\0\1\u0128\2\0\1\20\1\0"+
    "\2\20\1\0\5\20\5\0\20\20\26\0\5\20\1\u0129"+
    "\7\20\1\0\1\20\2\0\1\20\1\0\2\20\1\0"+
    "\5\20\5\0\20\20\26\0\15\20\1\0\1\20\2\0"+
    "\1\20\1\0\1\u012a\1\20\1\0\5\20\5\0\20\20"+
    "\26\0\5\20\1\u012b\7\20\1\0\1\20\2\0\1\20"+
    "\1\0\2\20\1\0\5\20\5\0\20\20\26\0\11\20"+
    "\1\u012c\3\20\1\0\1\20\2\0\1\20\1\0\2\20"+
    "\1\0\5\20\5\0\20\20\26\0\15\20\1\0\1\20"+
    "\2\0\1\20\1\0\2\20\1\0\5\20\5\0\5\20"+
    "\1\u012d\12\20\26\0\15\20\1\0\1\20\2\0\1\20"+
    "\1\0\2\20\1\0\5\20\5\0\5\20\1\u012e\12\20"+
    "\26\0\15\20\1\0\1\20\2\0\1\20\1\0\1\u012f"+
    "\1\20\1\0\5\20\5\0\20\20\26\0\15\20\1\0"+
    "\1\20\2\0\1\20\1\0\2\20\1\0\5\20\5\0"+
    "\13\20\1\u0130\4\20\26\0\15\20\1\0\1\20\2\0"+
    "\1\20\1\0\1\u0131\1\20\1\0\5\20\5\0\20\20"+
    "\26\0\15\20\1\0\1\u0132\2\0\1\20\1\0\2\20"+
    "\1\0\5\20\5\0\20\20\26\0\15\20\1\0\1\20"+
    "\2\0\1\u0133\1\0\2\20\1\0\5\20\5\0\20\20"+
    "\26\0\15\20\1\0\1\20\2\0\1\20\1\0\2\20"+
    "\1\0\5\20\5\0\3\20\1\u0134\14\20\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14700];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\1\11\2\1\1\11\42\1\1\11"+
    "\3\1\2\11\3\1\1\11\2\1\1\11\4\1\2\11"+
    "\1\1\1\0\10\1\3\0\5\1\1\11\12\1\2\0"+
    "\1\11\2\0\4\11\1\1\1\0\30\1\3\11\4\1"+
    "\4\11\1\1\1\11\2\1\4\11\1\1\1\0\31\1"+
    "\1\11\4\0\1\1\1\0\46\1\5\0\31\1\2\0"+
    "\25\1\2\0\43\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[308];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  private int myNestedCommentsDepth;

  private int mySavedTokenStart;

  private void saveNextTokenStart() {
    mySavedTokenStart = zzStartRead + yylength();
  }

  private void restoreSavedTokenStart() {
    zzStartRead = mySavedTokenStart;
  }


  public OCamlParsingFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public OCamlParsingFlexLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 166) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null; 
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 54: 
          { return OCamlTokenTypes.GT_RBRACKET;
          }
        case 123: break;
        case 74: 
          { return OCamlTokenTypes.FUN_KEYWORD;
          }
        case 124: break;
        case 36: 
          { return OCamlTokenTypes.OF_KEYWORD;
          }
        case 125: break;
        case 10: 
          { return OCamlTokenTypes.DOT;
          }
        case 126: break;
        case 80: 
          { return OCamlTokenTypes.TRY_KEYWORD;
          }
        case 127: break;
        case 15: 
          { return OCamlTokenTypes.PLUS;
          }
        case 128: break;
        case 31: 
          { return OCamlTokenTypes.LBRACE;
          }
        case 129: break;
        case 104: 
          { return OCamlTokenTypes.MATCH_KEYWORD;
          }
        case 130: break;
        case 101: 
          { return OCamlTokenTypes.BEGIN_KEYWORD;
          }
        case 131: break;
        case 113: 
          { return OCamlTokenTypes.INCLUDE_KEYWORD;
          }
        case 132: break;
        case 106: 
          { return OCamlTokenTypes.ASSERT_KEYWORD;
          }
        case 133: break;
        case 87: 
          { return OCamlTokenTypes.MOD_KEYWORD;
          }
        case 134: break;
        case 65: 
          { return OCamlTokenTypes.VBAR_VBAR;
          }
        case 135: break;
        case 97: 
          { return OCamlTokenTypes.DONE_KEYWORD;
          }
        case 136: break;
        case 71: 
          { myNestedCommentsDepth++;
                            saveNextTokenStart();
                            yybegin(COMMENT);
                            return OCamlTokenTypes.COMMENT_BEGIN;
          }
        case 137: break;
        case 2: 
          { return OCamlTokenTypes.WHITE_SPACE;
          }
        case 138: break;
        case 67: 
          { return OCamlTokenTypes.DOLLAR_COLON;
          }
        case 139: break;
        case 51: 
          { return OCamlTokenTypes.NOT_EQ;
          }
        case 140: break;
        case 92: 
          { return OCamlTokenTypes.OPEN_KEYWORD;
          }
        case 141: break;
        case 22: 
          { return OCamlTokenTypes.GT;
          }
        case 142: break;
        case 17: 
          { return OCamlTokenTypes.HASH;
          }
        case 143: break;
        case 116: 
          { return OCamlTokenTypes.MUTABLE_KEYWORD;
          }
        case 144: break;
        case 46: 
          { return OCamlTokenTypes.COLON_GT;
          }
        case 145: break;
        case 100: 
          { return OCamlTokenTypes.FALSE_KEYWORD;
          }
        case 146: break;
        case 1: 
          { return OCamlTokenTypes.BAD_CHARACTER;
          }
        case 147: break;
        case 12: 
          { return OCamlTokenTypes.QUOTE;
          }
        case 148: break;
        case 60: 
          { return OCamlTokenTypes.QUEST_QUEST;
          }
        case 149: break;
        case 53: 
          { return OCamlTokenTypes.GT_GT;
          }
        case 150: break;
        case 111: 
          { return OCamlTokenTypes.METHOD_KEYWORD;
          }
        case 151: break;
        case 84: 
          { return OCamlTokenTypes.ASR_KEYWORD;
          }
        case 152: break;
        case 120: 
          { return OCamlTokenTypes.EXCEPTION_KEYWORD;
          }
        case 153: break;
        case 94: 
          { return OCamlTokenTypes.TRUE_KEYWORD;
          }
        case 154: break;
        case 75: 
          { return OCamlTokenTypes.LOR_KEYWORD;
          }
        case 155: break;
        case 110: 
          { return OCamlTokenTypes.MODULE_KEYWORD;
          }
        case 156: break;
        case 57: 
          { return OCamlTokenTypes.LT_MINUS;
          }
        case 157: break;
        case 122: 
          { return OCamlTokenTypes.INITIALIZER_KEYWORD;
          }
        case 158: break;
        case 95: 
          { return OCamlTokenTypes.THEN_KEYWORD;
          }
        case 159: break;
        case 107: 
          { return OCamlTokenTypes.DOWNTO_KEYWORD;
          }
        case 160: break;
        case 30: 
          { return OCamlTokenTypes.ACCENT;
          }
        case 161: break;
        case 16: 
          { return OCamlTokenTypes.TILDE;
          }
        case 162: break;
        case 47: 
          { return OCamlTokenTypes.AS_KEYWORD;
          }
        case 163: break;
        case 118: 
          { return OCamlTokenTypes.FUNCTION_KEYWORD;
          }
        case 164: break;
        case 76: 
          { return OCamlTokenTypes.LET_KEYWORD;
          }
        case 165: break;
        case 37: 
          { return OCamlTokenTypes.OR_KEYWORD;
          }
        case 166: break;
        case 9: 
          { return OCamlTokenTypes.UCFC_IDENTIFIER;
          }
        case 167: break;
        case 91: 
          { return OCamlTokenTypes.LAZY_KEYWORD;
          }
        case 168: break;
        case 81: 
          { return OCamlTokenTypes.NEW_KEYWORD;
          }
        case 169: break;
        case 52: 
          { return OCamlTokenTypes.AMP_AMP;
          }
        case 170: break;
        case 82: 
          { return OCamlTokenTypes.CHAR_LITERAL;
          }
        case 171: break;
        case 11: 
          { return OCamlTokenTypes.MINUS;
          }
        case 172: break;
        case 98: 
          { return OCamlTokenTypes.WITH_KEYWORD;
          }
        case 173: break;
        case 112: 
          { return OCamlTokenTypes.FUNCTOR_KEYWORD;
          }
        case 174: break;
        case 99: 
          { return OCamlTokenTypes.WHEN_KEYWORD;
          }
        case 175: break;
        case 29: 
          { return OCamlTokenTypes.VBAR;
          }
        case 176: break;
        case 68: 
          { return OCamlTokenTypes.DOLLAR_DOLLAR;
          }
        case 177: break;
        case 38: 
          { return OCamlTokenTypes.DOT_DOT;
          }
        case 178: break;
        case 25: 
          { return OCamlTokenTypes.RBRACKET;
          }
        case 179: break;
        case 119: 
          { return OCamlTokenTypes.EXTERNAL_KEYWORD;
          }
        case 180: break;
        case 27: 
          { return OCamlTokenTypes.QUEST;
          }
        case 181: break;
        case 58: 
          { return OCamlTokenTypes.LT_COLON;
          }
        case 182: break;
        case 48: 
          { return OCamlTokenTypes.DO_KEYWORD;
          }
        case 183: break;
        case 114: 
          { return OCamlTokenTypes.INHERIT_KEYWORD;
          }
        case 184: break;
        case 103: 
          { return OCamlTokenTypes.WHILE_KEYWORD;
          }
        case 185: break;
        case 64: 
          { return OCamlTokenTypes.VBAR_RBRACKET;
          }
        case 186: break;
        case 90: 
          { return OCamlTokenTypes.LAND_KEYWORD;
          }
        case 187: break;
        case 105: 
          { return OCamlTokenTypes.OBJECT_KEYWORD;
          }
        case 188: break;
        case 5: 
          { return OCamlTokenTypes.RPAR;
          }
        case 189: break;
        case 14: 
          { return OCamlTokenTypes.INFIX_OPERATOR;
          }
        case 190: break;
        case 7: 
          { return OCamlTokenTypes.UNDERSCORE;
          }
        case 191: break;
        case 23: 
          { return OCamlTokenTypes.SEMICOLON;
          }
        case 192: break;
        case 108: 
          { return OCamlTokenTypes.STRUCT_KEYWORD;
          }
        case 193: break;
        case 40: 
          { return OCamlTokenTypes.MINUS_GT;
          }
        case 194: break;
        case 117: 
          { return OCamlTokenTypes.VIRTUAL_KEYWORD;
          }
        case 195: break;
        case 72: 
          { myNestedCommentsDepth--;
                            if (myNestedCommentsDepth == 0) {
                              yybegin(YYINITIAL);
                            }
                            else {
                              saveNextTokenStart();
                              yybegin(COMMENT);
                            }
                            return OCamlTokenTypes.COMMENT_END;
          }
        case 196: break;
        case 77: 
          { return OCamlTokenTypes.LSL_KEYWORD;
          }
        case 197: break;
        case 109: 
          { return OCamlTokenTypes.PARSER_KEYWORD;
          }
        case 198: break;
        case 28: 
          { return OCamlTokenTypes.LBRACKET;
          }
        case 199: break;
        case 115: 
          { return OCamlTokenTypes.PRIVATE_KEYWORD;
          }
        case 200: break;
        case 62: 
          { return OCamlTokenTypes.LBRACKET_LT;
          }
        case 201: break;
        case 19: 
          { return OCamlTokenTypes.EQ;
          }
        case 202: break;
        case 44: 
          { return OCamlTokenTypes.COLON_COLON;
          }
        case 203: break;
        case 49: 
          { return OCamlTokenTypes.IF_KEYWORD;
          }
        case 204: break;
        case 45: 
          { return OCamlTokenTypes.COLON_EQ;
          }
        case 205: break;
        case 20: 
          { return OCamlTokenTypes.AMP;
          }
        case 206: break;
        case 13: 
          { return OCamlTokenTypes.COLON;
          }
        case 207: break;
        case 3: 
          { return OCamlTokenTypes.LPAR;
          }
        case 208: break;
        case 93: 
          { return OCamlTokenTypes.ELSE_KEYWORD;
          }
        case 209: break;
        case 66: 
          { return OCamlTokenTypes.LBRACE_LT;
          }
        case 210: break;
        case 85: 
          { return OCamlTokenTypes.SIG_KEYWORD;
          }
        case 211: break;
        case 89: 
          { return OCamlTokenTypes.LXOR_KEYWORD;
          }
        case 212: break;
        case 18: 
          { return OCamlTokenTypes.PREFIX_OPERATOR;
          }
        case 213: break;
        case 41: 
          { return OCamlTokenTypes.TO_KEYWORD;
          }
        case 214: break;
        case 59: 
          { return OCamlTokenTypes.LT_LT;
          }
        case 215: break;
        case 8: 
          { return OCamlTokenTypes.LCFC_IDENTIFIER;
          }
        case 216: break;
        case 86: 
          { return OCamlTokenTypes.REC_KEYWORD;
          }
        case 217: break;
        case 121: 
          { return OCamlTokenTypes.CONSTRAINT_KEYWORD;
          }
        case 218: break;
        case 42: 
          { return OCamlTokenTypes.EMPTY_CHAR_LITERAL;
          }
        case 219: break;
        case 79: 
          { return OCamlTokenTypes.END_KEYWORD;
          }
        case 220: break;
        case 61: 
          { return OCamlTokenTypes.LBRACKET_GT;
          }
        case 221: break;
        case 33: 
          { /* ignore */
          }
        case 222: break;
        case 83: 
          { return OCamlTokenTypes.AND_KEYWORD;
          }
        case 223: break;
        case 34: 
          { myNestedCommentsDepth = 1;
                            saveNextTokenStart();
                            yybegin(COMMENT);
                            return OCamlTokenTypes.COMMENT_BEGIN;
          }
        case 224: break;
        case 6: 
          { return OCamlTokenTypes.INTEGER_LITERAL;
          }
        case 225: break;
        case 43: 
          { return OCamlTokenTypes.STRING_LITERAL;
          }
        case 226: break;
        case 73: 
          { return OCamlTokenTypes.FOR_KEYWORD;
          }
        case 227: break;
        case 32: 
          { return OCamlTokenTypes.DOLLAR;
          }
        case 228: break;
        case 96: 
          { return OCamlTokenTypes.TYPE_KEYWORD;
          }
        case 229: break;
        case 78: 
          { return OCamlTokenTypes.LSR_KEYWORD;
          }
        case 230: break;
        case 63: 
          { return OCamlTokenTypes.LBRACKET_VBAR;
          }
        case 231: break;
        case 70: 
          { yypushback(yylength());
                            restoreSavedTokenStart();
                            yybegin(BEFORE_COMMENT_END);
                            if (yylength() != 0) {
                              return OCamlTokenTypes.COMMENT;
                            }
          }
        case 232: break;
        case 55: 
          { return OCamlTokenTypes.GT_RBRACE;
          }
        case 233: break;
        case 21: 
          { return OCamlTokenTypes.COMMA;
          }
        case 234: break;
        case 35: 
          { return OCamlTokenTypes.FLOAT_LITERAL;
          }
        case 235: break;
        case 88: 
          { return OCamlTokenTypes.VAL_KEYWORD;
          }
        case 236: break;
        case 102: 
          { return OCamlTokenTypes.CLASS_KEYWORD;
          }
        case 237: break;
        case 26: 
          { return OCamlTokenTypes.RBRACE;
          }
        case 238: break;
        case 50: 
          { return OCamlTokenTypes.IN_KEYWORD;
          }
        case 239: break;
        case 39: 
          { return OCamlTokenTypes.MINUS_DOT;
          }
        case 240: break;
        case 56: 
          { return OCamlTokenTypes.SEMICOLON_SEMICOLON;
          }
        case 241: break;
        case 24: 
          { return OCamlTokenTypes.LT;
          }
        case 242: break;
        case 4: 
          { return OCamlTokenTypes.MULT;
          }
        case 243: break;
        case 69: 
          { yypushback(yylength());
                            restoreSavedTokenStart();
                            yybegin(BEFORE_COMMENT_BEGIN);
                            if (yylength() != 0) {
                              return OCamlTokenTypes.COMMENT;
                            }
          }
        case 244: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case COMMENT: {
              restoreSavedTokenStart();
                            yybegin(YYINITIAL);
                            if (yylength() != 0) {
                              return OCamlTokenTypes.COMMENT;
                            }
            }
            case 309: break;
            default:
              {
                yybegin(YYINITIAL);
                            return null;
              }
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
